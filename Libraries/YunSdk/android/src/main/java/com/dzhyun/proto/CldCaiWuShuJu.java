// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CldCaiWuShuJu.proto

package com.dzhyun.proto;

public final class CldCaiWuShuJu {
  private CldCaiWuShuJu() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface BasicFinanceDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dzhyun.BasicFinanceData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    boolean hasObj();
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    java.lang.String getObj();
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    com.google.protobuf.ByteString
        getObjBytes();

    /**
     * <code>required string repdate = 2;</code>
     *
     * <pre>
     * 报告期YYYYMMDDttmmss EndDate
     * </pre>
     */
    boolean hasRepdate();
    /**
     * <code>required string repdate = 2;</code>
     *
     * <pre>
     * 报告期YYYYMMDDttmmss EndDate
     * </pre>
     */
    java.lang.String getRepdate();
    /**
     * <code>required string repdate = 2;</code>
     *
     * <pre>
     * 报告期YYYYMMDDttmmss EndDate
     * </pre>
     */
    com.google.protobuf.ByteString
        getRepdateBytes();

    /**
     * <code>optional int64 floatdate = 3;</code>
     *
     * <pre>
     * 上市期YYYYMMDDttmmss C35
     * </pre>
     */
    boolean hasFloatdate();
    /**
     * <code>optional int64 floatdate = 3;</code>
     *
     * <pre>
     * 上市期YYYYMMDDttmmss C35
     * </pre>
     */
    long getFloatdate();

    /**
     * <code>optional double earnps = 4;</code>
     *
     * <pre>
     * 每股收益 C3   
     * </pre>
     */
    boolean hasEarnps();
    /**
     * <code>optional double earnps = 4;</code>
     *
     * <pre>
     * 每股收益 C3   
     * </pre>
     */
    double getEarnps();

    /**
     * <code>optional double assetps = 5;</code>
     *
     * <pre>
     * 每股净资产 C4
     * </pre>
     */
    boolean hasAssetps();
    /**
     * <code>optional double assetps = 5;</code>
     *
     * <pre>
     * 每股净资产 C4
     * </pre>
     */
    double getAssetps();

    /**
     * <code>optional double rona = 6;</code>
     *
     * <pre>
     * 净资产收益率 C5
     * </pre>
     */
    boolean hasRona();
    /**
     * <code>optional double rona = 6;</code>
     *
     * <pre>
     * 净资产收益率 C5
     * </pre>
     */
    double getRona();

    /**
     * <code>optional double cashps = 7;</code>
     *
     * <pre>
     * 每股经营现金 C6
     * </pre>
     */
    boolean hasCashps();
    /**
     * <code>optional double cashps = 7;</code>
     *
     * <pre>
     * 每股经营现金 C6
     * </pre>
     */
    double getCashps();

    /**
     * <code>optional double accufundps = 8;</code>
     *
     * <pre>
     * 每股公积金 C7
     * </pre>
     */
    boolean hasAccufundps();
    /**
     * <code>optional double accufundps = 8;</code>
     *
     * <pre>
     * 每股公积金 C7
     * </pre>
     */
    double getAccufundps();

    /**
     * <code>optional double unapproprofitps = 9;</code>
     *
     * <pre>
     * 每股未分配 C8   
     * </pre>
     */
    boolean hasUnapproprofitps();
    /**
     * <code>optional double unapproprofitps = 9;</code>
     *
     * <pre>
     * 每股未分配 C8   
     * </pre>
     */
    double getUnapproprofitps();

    /**
     * <code>optional double rateonequity = 10;</code>
     *
     * <pre>
     * 股东权益比 C9
     * </pre>
     */
    boolean hasRateonequity();
    /**
     * <code>optional double rateonequity = 10;</code>
     *
     * <pre>
     * 股东权益比 C9
     * </pre>
     */
    double getRateonequity();

    /**
     * <code>optional double profitinc = 11;</code>
     *
     * <pre>
     * 净利润同比 C10  
     * </pre>
     */
    boolean hasProfitinc();
    /**
     * <code>optional double profitinc = 11;</code>
     *
     * <pre>
     * 净利润同比 C10  
     * </pre>
     */
    double getProfitinc();

    /**
     * <code>optional double incomeinc = 12;</code>
     *
     * <pre>
     * 主营收入同比 C11  
     * </pre>
     */
    boolean hasIncomeinc();
    /**
     * <code>optional double incomeinc = 12;</code>
     *
     * <pre>
     * 主营收入同比 C11  
     * </pre>
     */
    double getIncomeinc();

    /**
     * <code>optional double grossprofit = 13;</code>
     *
     * <pre>
     * 销售毛利率 C12
     * </pre>
     */
    boolean hasGrossprofit();
    /**
     * <code>optional double grossprofit = 13;</code>
     *
     * <pre>
     * 销售毛利率 C12
     * </pre>
     */
    double getGrossprofit();

    /**
     * <code>optional double adjassetps = 14;</code>
     *
     * <pre>
     * 调整每股净资 C13 
     * </pre>
     */
    boolean hasAdjassetps();
    /**
     * <code>optional double adjassetps = 14;</code>
     *
     * <pre>
     * 调整每股净资 C13 
     * </pre>
     */
    double getAdjassetps();

    /**
     * <code>optional double asset = 15;</code>
     *
     * <pre>
     * 总资产 C14   
     * </pre>
     */
    boolean hasAsset();
    /**
     * <code>optional double asset = 15;</code>
     *
     * <pre>
     * 总资产 C14   
     * </pre>
     */
    double getAsset();

    /**
     * <code>optional double floatasset = 16;</code>
     *
     * <pre>
     * 流动资产 C15
     * </pre>
     */
    boolean hasFloatasset();
    /**
     * <code>optional double floatasset = 16;</code>
     *
     * <pre>
     * 流动资产 C15
     * </pre>
     */
    double getFloatasset();

    /**
     * <code>optional double fixedasset = 17;</code>
     *
     * <pre>
     * 固定资产 C16
     * </pre>
     */
    boolean hasFixedasset();
    /**
     * <code>optional double fixedasset = 17;</code>
     *
     * <pre>
     * 固定资产 C16
     * </pre>
     */
    double getFixedasset();

    /**
     * <code>optional double intasset = 18;</code>
     *
     * <pre>
     * 无形资产 C17   
     * </pre>
     */
    boolean hasIntasset();
    /**
     * <code>optional double intasset = 18;</code>
     *
     * <pre>
     * 无形资产 C17   
     * </pre>
     */
    double getIntasset();

    /**
     * <code>optional double floatdebet = 19;</code>
     *
     * <pre>
     * 流动负债 C18
     * </pre>
     */
    boolean hasFloatdebet();
    /**
     * <code>optional double floatdebet = 19;</code>
     *
     * <pre>
     * 流动负债 C18
     * </pre>
     */
    double getFloatdebet();

    /**
     * <code>optional double longdebet = 20;</code>
     *
     * <pre>
     * 长期负债 C19
     * </pre>
     */
    boolean hasLongdebet();
    /**
     * <code>optional double longdebet = 20;</code>
     *
     * <pre>
     * 长期负债 C19
     * </pre>
     */
    double getLongdebet();

    /**
     * <code>optional double alldebet = 21;</code>
     *
     * <pre>
     * 总负债 C20
     * </pre>
     */
    boolean hasAlldebet();
    /**
     * <code>optional double alldebet = 21;</code>
     *
     * <pre>
     * 总负债 C20
     * </pre>
     */
    double getAlldebet();

    /**
     * <code>optional double hoderequity = 22;</code>
     *
     * <pre>
     * 股东权益 C21
     * </pre>
     */
    boolean hasHoderequity();
    /**
     * <code>optional double hoderequity = 22;</code>
     *
     * <pre>
     * 股东权益 C21
     * </pre>
     */
    double getHoderequity();

    /**
     * <code>optional double capitalfund = 23;</code>
     *
     * <pre>
     * 资本公积金 C22
     * </pre>
     */
    boolean hasCapitalfund();
    /**
     * <code>optional double capitalfund = 23;</code>
     *
     * <pre>
     * 资本公积金 C22
     * </pre>
     */
    double getCapitalfund();

    /**
     * <code>optional double cashfloat = 24;</code>
     *
     * <pre>
     * 经营现金流量 C23
     * </pre>
     */
    boolean hasCashfloat();
    /**
     * <code>optional double cashfloat = 24;</code>
     *
     * <pre>
     * 经营现金流量 C23
     * </pre>
     */
    double getCashfloat();

    /**
     * <code>optional double investfloat = 25;</code>
     *
     * <pre>
     * 投资现金流量 C24
     * </pre>
     */
    boolean hasInvestfloat();
    /**
     * <code>optional double investfloat = 25;</code>
     *
     * <pre>
     * 投资现金流量 C24
     * </pre>
     */
    double getInvestfloat();

    /**
     * <code>optional double raisefloat = 26;</code>
     *
     * <pre>
     * 筹资现金流量 C25
     * </pre>
     */
    boolean hasRaisefloat();
    /**
     * <code>optional double raisefloat = 26;</code>
     *
     * <pre>
     * 筹资现金流量 C25
     * </pre>
     */
    double getRaisefloat();

    /**
     * <code>optional double cashinc = 27;</code>
     *
     * <pre>
     * 现金增加额 C26 
     * </pre>
     */
    boolean hasCashinc();
    /**
     * <code>optional double cashinc = 27;</code>
     *
     * <pre>
     * 现金增加额 C26 
     * </pre>
     */
    double getCashinc();

    /**
     * <code>optional double mainincome = 28;</code>
     *
     * <pre>
     * 主营收入 C27 
     * </pre>
     */
    boolean hasMainincome();
    /**
     * <code>optional double mainincome = 28;</code>
     *
     * <pre>
     * 主营收入 C27 
     * </pre>
     */
    double getMainincome();

    /**
     * <code>optional double mainprofit = 29;</code>
     *
     * <pre>
     * 主营利润 C28
     * </pre>
     */
    boolean hasMainprofit();
    /**
     * <code>optional double mainprofit = 29;</code>
     *
     * <pre>
     * 主营利润 C28
     * </pre>
     */
    double getMainprofit();

    /**
     * <code>optional double tradeprofit = 30;</code>
     *
     * <pre>
     * 营业利润 C29
     * </pre>
     */
    boolean hasTradeprofit();
    /**
     * <code>optional double tradeprofit = 30;</code>
     *
     * <pre>
     * 营业利润 C29
     * </pre>
     */
    double getTradeprofit();

    /**
     * <code>optional double investprofit = 31;</code>
     *
     * <pre>
     * 投资收益 C30
     * </pre>
     */
    boolean hasInvestprofit();
    /**
     * <code>optional double investprofit = 31;</code>
     *
     * <pre>
     * 投资收益 C30
     * </pre>
     */
    double getInvestprofit();

    /**
     * <code>optional double otherbalance = 32;</code>
     *
     * <pre>
     * 营业外收支 C31
     * </pre>
     */
    boolean hasOtherbalance();
    /**
     * <code>optional double otherbalance = 32;</code>
     *
     * <pre>
     * 营业外收支 C31
     * </pre>
     */
    double getOtherbalance();

    /**
     * <code>optional double allprofit = 33;</code>
     *
     * <pre>
     * 利润总额 C32
     * </pre>
     */
    boolean hasAllprofit();
    /**
     * <code>optional double allprofit = 33;</code>
     *
     * <pre>
     * 利润总额 C32
     * </pre>
     */
    double getAllprofit();

    /**
     * <code>optional double netprofit = 34;</code>
     *
     * <pre>
     * 净利润 C33
     * </pre>
     */
    boolean hasNetprofit();
    /**
     * <code>optional double netprofit = 34;</code>
     *
     * <pre>
     * 净利润 C33
     * </pre>
     */
    double getNetprofit();

    /**
     * <code>optional double unapproprofit = 35;</code>
     *
     * <pre>
     * 未分配利润 C34
     * </pre>
     */
    boolean hasUnapproprofit();
    /**
     * <code>optional double unapproprofit = 35;</code>
     *
     * <pre>
     * 未分配利润 C34
     * </pre>
     */
    double getUnapproprofit();

    /**
     * <code>optional double totalshare = 36;</code>
     *
     * <pre>
     * 总股本 C1
     * </pre>
     */
    boolean hasTotalshare();
    /**
     * <code>optional double totalshare = 36;</code>
     *
     * <pre>
     * 总股本 C1
     * </pre>
     */
    double getTotalshare();

    /**
     * <code>optional double norestrictshare = 37;</code>
     *
     * <pre>
     * 无限售股份合计 C36
     * </pre>
     */
    boolean hasNorestrictshare();
    /**
     * <code>optional double norestrictshare = 37;</code>
     *
     * <pre>
     * 无限售股份合计 C36
     * </pre>
     */
    double getNorestrictshare();

    /**
     * <code>optional double ashare = 38;</code>
     *
     * <pre>
     * A股 C37
     * </pre>
     */
    boolean hasAshare();
    /**
     * <code>optional double ashare = 38;</code>
     *
     * <pre>
     * A股 C37
     * </pre>
     */
    double getAshare();

    /**
     * <code>optional double bshare = 39;</code>
     *
     * <pre>
     * B股 C38
     * </pre>
     */
    boolean hasBshare();
    /**
     * <code>optional double bshare = 39;</code>
     *
     * <pre>
     * B股 C38
     * </pre>
     */
    double getBshare();

    /**
     * <code>optional double foreignshare = 40;</code>
     *
     * <pre>
     * 境外上市外资股 C39
     * </pre>
     */
    boolean hasForeignshare();
    /**
     * <code>optional double foreignshare = 40;</code>
     *
     * <pre>
     * 境外上市外资股 C39
     * </pre>
     */
    double getForeignshare();

    /**
     * <code>optional double otherfloatshare = 41;</code>
     *
     * <pre>
     * 其他流通股份 C40
     * </pre>
     */
    boolean hasOtherfloatshare();
    /**
     * <code>optional double otherfloatshare = 41;</code>
     *
     * <pre>
     * 其他流通股份 C40
     * </pre>
     */
    double getOtherfloatshare();

    /**
     * <code>optional double restrictshare = 42;</code>
     *
     * <pre>
     * 限售股份合计 C41
     * </pre>
     */
    boolean hasRestrictshare();
    /**
     * <code>optional double restrictshare = 42;</code>
     *
     * <pre>
     * 限售股份合计 C41
     * </pre>
     */
    double getRestrictshare();

    /**
     * <code>optional double nationshare = 43;</code>
     *
     * <pre>
     * 国家持股 C42
     * </pre>
     */
    boolean hasNationshare();
    /**
     * <code>optional double nationshare = 43;</code>
     *
     * <pre>
     * 国家持股 C42
     * </pre>
     */
    double getNationshare();

    /**
     * <code>optional double natcorpshare = 44;</code>
     *
     * <pre>
     * 国有法人持股 C43 
     * </pre>
     */
    boolean hasNatcorpshare();
    /**
     * <code>optional double natcorpshare = 44;</code>
     *
     * <pre>
     * 国有法人持股 C43 
     * </pre>
     */
    double getNatcorpshare();

    /**
     * <code>optional double domestcorpshare = 45;</code>
     *
     * <pre>
     * 境内法人持股 C44
     * </pre>
     */
    boolean hasDomestcorpshare();
    /**
     * <code>optional double domestcorpshare = 45;</code>
     *
     * <pre>
     * 境内法人持股 C44
     * </pre>
     */
    double getDomestcorpshare();

    /**
     * <code>optional double domestindshare = 46;</code>
     *
     * <pre>
     * 境内自然人持股 C45
     * </pre>
     */
    boolean hasDomestindshare();
    /**
     * <code>optional double domestindshare = 46;</code>
     *
     * <pre>
     * 境内自然人持股 C45
     * </pre>
     */
    double getDomestindshare();

    /**
     * <code>optional double otherlaunchshare = 47;</code>
     *
     * <pre>
     * 其他发起人股份 C46
     * </pre>
     */
    boolean hasOtherlaunchshare();
    /**
     * <code>optional double otherlaunchshare = 47;</code>
     *
     * <pre>
     * 其他发起人股份 C46
     * </pre>
     */
    double getOtherlaunchshare();

    /**
     * <code>optional double raisecorpshare = 48;</code>
     *
     * <pre>
     * 募集法人股份 C47
     * </pre>
     */
    boolean hasRaisecorpshare();
    /**
     * <code>optional double raisecorpshare = 48;</code>
     *
     * <pre>
     * 募集法人股份 C47
     * </pre>
     */
    double getRaisecorpshare();

    /**
     * <code>optional double foreigncorpshare = 49;</code>
     *
     * <pre>
     * 境外法人持股 C48
     * </pre>
     */
    boolean hasForeigncorpshare();
    /**
     * <code>optional double foreigncorpshare = 49;</code>
     *
     * <pre>
     * 境外法人持股 C48
     * </pre>
     */
    double getForeigncorpshare();

    /**
     * <code>optional double foreingIndshare = 50;</code>
     *
     * <pre>
     * 境外自然人持股 C49
     * </pre>
     */
    boolean hasForeingIndshare();
    /**
     * <code>optional double foreingIndshare = 50;</code>
     *
     * <pre>
     * 境外自然人持股 C49
     * </pre>
     */
    double getForeingIndshare();

    /**
     * <code>optional double preforothershare = 51;</code>
     *
     * <pre>
     * 优先股或其他 C50	
     * </pre>
     */
    boolean hasPreforothershare();
    /**
     * <code>optional double preforothershare = 51;</code>
     *
     * <pre>
     * 优先股或其他 C50	
     * </pre>
     */
    double getPreforothershare();
  }
  /**
   * Protobuf type {@code dzhyun.BasicFinanceData}
   *
   * <pre>
   * 基本财务数据 
   * </pre>
   */
  public static final class BasicFinanceData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dzhyun.BasicFinanceData)
      BasicFinanceDataOrBuilder {
    // Use BasicFinanceData.newBuilder() to construct.
    private BasicFinanceData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BasicFinanceData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BasicFinanceData defaultInstance;
    public static BasicFinanceData getDefaultInstance() {
      return defaultInstance;
    }

    public BasicFinanceData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BasicFinanceData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              obj_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              repdate_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              floatdate_ = input.readInt64();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              earnps_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              assetps_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              rona_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              cashps_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              accufundps_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              unapproprofitps_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              rateonequity_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              profitinc_ = input.readDouble();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              incomeinc_ = input.readDouble();
              break;
            }
            case 105: {
              bitField0_ |= 0x00001000;
              grossprofit_ = input.readDouble();
              break;
            }
            case 113: {
              bitField0_ |= 0x00002000;
              adjassetps_ = input.readDouble();
              break;
            }
            case 121: {
              bitField0_ |= 0x00004000;
              asset_ = input.readDouble();
              break;
            }
            case 129: {
              bitField0_ |= 0x00008000;
              floatasset_ = input.readDouble();
              break;
            }
            case 137: {
              bitField0_ |= 0x00010000;
              fixedasset_ = input.readDouble();
              break;
            }
            case 145: {
              bitField0_ |= 0x00020000;
              intasset_ = input.readDouble();
              break;
            }
            case 153: {
              bitField0_ |= 0x00040000;
              floatdebet_ = input.readDouble();
              break;
            }
            case 161: {
              bitField0_ |= 0x00080000;
              longdebet_ = input.readDouble();
              break;
            }
            case 169: {
              bitField0_ |= 0x00100000;
              alldebet_ = input.readDouble();
              break;
            }
            case 177: {
              bitField0_ |= 0x00200000;
              hoderequity_ = input.readDouble();
              break;
            }
            case 185: {
              bitField0_ |= 0x00400000;
              capitalfund_ = input.readDouble();
              break;
            }
            case 193: {
              bitField0_ |= 0x00800000;
              cashfloat_ = input.readDouble();
              break;
            }
            case 201: {
              bitField0_ |= 0x01000000;
              investfloat_ = input.readDouble();
              break;
            }
            case 209: {
              bitField0_ |= 0x02000000;
              raisefloat_ = input.readDouble();
              break;
            }
            case 217: {
              bitField0_ |= 0x04000000;
              cashinc_ = input.readDouble();
              break;
            }
            case 225: {
              bitField0_ |= 0x08000000;
              mainincome_ = input.readDouble();
              break;
            }
            case 233: {
              bitField0_ |= 0x10000000;
              mainprofit_ = input.readDouble();
              break;
            }
            case 241: {
              bitField0_ |= 0x20000000;
              tradeprofit_ = input.readDouble();
              break;
            }
            case 249: {
              bitField0_ |= 0x40000000;
              investprofit_ = input.readDouble();
              break;
            }
            case 257: {
              bitField0_ |= 0x80000000;
              otherbalance_ = input.readDouble();
              break;
            }
            case 265: {
              bitField1_ |= 0x00000001;
              allprofit_ = input.readDouble();
              break;
            }
            case 273: {
              bitField1_ |= 0x00000002;
              netprofit_ = input.readDouble();
              break;
            }
            case 281: {
              bitField1_ |= 0x00000004;
              unapproprofit_ = input.readDouble();
              break;
            }
            case 289: {
              bitField1_ |= 0x00000008;
              totalshare_ = input.readDouble();
              break;
            }
            case 297: {
              bitField1_ |= 0x00000010;
              norestrictshare_ = input.readDouble();
              break;
            }
            case 305: {
              bitField1_ |= 0x00000020;
              ashare_ = input.readDouble();
              break;
            }
            case 313: {
              bitField1_ |= 0x00000040;
              bshare_ = input.readDouble();
              break;
            }
            case 321: {
              bitField1_ |= 0x00000080;
              foreignshare_ = input.readDouble();
              break;
            }
            case 329: {
              bitField1_ |= 0x00000100;
              otherfloatshare_ = input.readDouble();
              break;
            }
            case 337: {
              bitField1_ |= 0x00000200;
              restrictshare_ = input.readDouble();
              break;
            }
            case 345: {
              bitField1_ |= 0x00000400;
              nationshare_ = input.readDouble();
              break;
            }
            case 353: {
              bitField1_ |= 0x00000800;
              natcorpshare_ = input.readDouble();
              break;
            }
            case 361: {
              bitField1_ |= 0x00001000;
              domestcorpshare_ = input.readDouble();
              break;
            }
            case 369: {
              bitField1_ |= 0x00002000;
              domestindshare_ = input.readDouble();
              break;
            }
            case 377: {
              bitField1_ |= 0x00004000;
              otherlaunchshare_ = input.readDouble();
              break;
            }
            case 385: {
              bitField1_ |= 0x00008000;
              raisecorpshare_ = input.readDouble();
              break;
            }
            case 393: {
              bitField1_ |= 0x00010000;
              foreigncorpshare_ = input.readDouble();
              break;
            }
            case 401: {
              bitField1_ |= 0x00020000;
              foreingIndshare_ = input.readDouble();
              break;
            }
            case 409: {
              bitField1_ |= 0x00040000;
              preforothershare_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_BasicFinanceData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_BasicFinanceData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.class, com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.Builder.class);
    }

    public static com.google.protobuf.Parser<BasicFinanceData> PARSER =
        new com.google.protobuf.AbstractParser<BasicFinanceData>() {
      public BasicFinanceData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BasicFinanceData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BasicFinanceData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int OBJ_FIELD_NUMBER = 1;
    private java.lang.Object obj_;
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    public boolean hasObj() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    public java.lang.String getObj() {
      java.lang.Object ref = obj_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          obj_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getObjBytes() {
      java.lang.Object ref = obj_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        obj_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPDATE_FIELD_NUMBER = 2;
    private java.lang.Object repdate_;
    /**
     * <code>required string repdate = 2;</code>
     *
     * <pre>
     * 报告期YYYYMMDDttmmss EndDate
     * </pre>
     */
    public boolean hasRepdate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string repdate = 2;</code>
     *
     * <pre>
     * 报告期YYYYMMDDttmmss EndDate
     * </pre>
     */
    public java.lang.String getRepdate() {
      java.lang.Object ref = repdate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          repdate_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string repdate = 2;</code>
     *
     * <pre>
     * 报告期YYYYMMDDttmmss EndDate
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRepdateBytes() {
      java.lang.Object ref = repdate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        repdate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FLOATDATE_FIELD_NUMBER = 3;
    private long floatdate_;
    /**
     * <code>optional int64 floatdate = 3;</code>
     *
     * <pre>
     * 上市期YYYYMMDDttmmss C35
     * </pre>
     */
    public boolean hasFloatdate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 floatdate = 3;</code>
     *
     * <pre>
     * 上市期YYYYMMDDttmmss C35
     * </pre>
     */
    public long getFloatdate() {
      return floatdate_;
    }

    public static final int EARNPS_FIELD_NUMBER = 4;
    private double earnps_;
    /**
     * <code>optional double earnps = 4;</code>
     *
     * <pre>
     * 每股收益 C3   
     * </pre>
     */
    public boolean hasEarnps() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double earnps = 4;</code>
     *
     * <pre>
     * 每股收益 C3   
     * </pre>
     */
    public double getEarnps() {
      return earnps_;
    }

    public static final int ASSETPS_FIELD_NUMBER = 5;
    private double assetps_;
    /**
     * <code>optional double assetps = 5;</code>
     *
     * <pre>
     * 每股净资产 C4
     * </pre>
     */
    public boolean hasAssetps() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double assetps = 5;</code>
     *
     * <pre>
     * 每股净资产 C4
     * </pre>
     */
    public double getAssetps() {
      return assetps_;
    }

    public static final int RONA_FIELD_NUMBER = 6;
    private double rona_;
    /**
     * <code>optional double rona = 6;</code>
     *
     * <pre>
     * 净资产收益率 C5
     * </pre>
     */
    public boolean hasRona() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double rona = 6;</code>
     *
     * <pre>
     * 净资产收益率 C5
     * </pre>
     */
    public double getRona() {
      return rona_;
    }

    public static final int CASHPS_FIELD_NUMBER = 7;
    private double cashps_;
    /**
     * <code>optional double cashps = 7;</code>
     *
     * <pre>
     * 每股经营现金 C6
     * </pre>
     */
    public boolean hasCashps() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double cashps = 7;</code>
     *
     * <pre>
     * 每股经营现金 C6
     * </pre>
     */
    public double getCashps() {
      return cashps_;
    }

    public static final int ACCUFUNDPS_FIELD_NUMBER = 8;
    private double accufundps_;
    /**
     * <code>optional double accufundps = 8;</code>
     *
     * <pre>
     * 每股公积金 C7
     * </pre>
     */
    public boolean hasAccufundps() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double accufundps = 8;</code>
     *
     * <pre>
     * 每股公积金 C7
     * </pre>
     */
    public double getAccufundps() {
      return accufundps_;
    }

    public static final int UNAPPROPROFITPS_FIELD_NUMBER = 9;
    private double unapproprofitps_;
    /**
     * <code>optional double unapproprofitps = 9;</code>
     *
     * <pre>
     * 每股未分配 C8   
     * </pre>
     */
    public boolean hasUnapproprofitps() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double unapproprofitps = 9;</code>
     *
     * <pre>
     * 每股未分配 C8   
     * </pre>
     */
    public double getUnapproprofitps() {
      return unapproprofitps_;
    }

    public static final int RATEONEQUITY_FIELD_NUMBER = 10;
    private double rateonequity_;
    /**
     * <code>optional double rateonequity = 10;</code>
     *
     * <pre>
     * 股东权益比 C9
     * </pre>
     */
    public boolean hasRateonequity() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double rateonequity = 10;</code>
     *
     * <pre>
     * 股东权益比 C9
     * </pre>
     */
    public double getRateonequity() {
      return rateonequity_;
    }

    public static final int PROFITINC_FIELD_NUMBER = 11;
    private double profitinc_;
    /**
     * <code>optional double profitinc = 11;</code>
     *
     * <pre>
     * 净利润同比 C10  
     * </pre>
     */
    public boolean hasProfitinc() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional double profitinc = 11;</code>
     *
     * <pre>
     * 净利润同比 C10  
     * </pre>
     */
    public double getProfitinc() {
      return profitinc_;
    }

    public static final int INCOMEINC_FIELD_NUMBER = 12;
    private double incomeinc_;
    /**
     * <code>optional double incomeinc = 12;</code>
     *
     * <pre>
     * 主营收入同比 C11  
     * </pre>
     */
    public boolean hasIncomeinc() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional double incomeinc = 12;</code>
     *
     * <pre>
     * 主营收入同比 C11  
     * </pre>
     */
    public double getIncomeinc() {
      return incomeinc_;
    }

    public static final int GROSSPROFIT_FIELD_NUMBER = 13;
    private double grossprofit_;
    /**
     * <code>optional double grossprofit = 13;</code>
     *
     * <pre>
     * 销售毛利率 C12
     * </pre>
     */
    public boolean hasGrossprofit() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional double grossprofit = 13;</code>
     *
     * <pre>
     * 销售毛利率 C12
     * </pre>
     */
    public double getGrossprofit() {
      return grossprofit_;
    }

    public static final int ADJASSETPS_FIELD_NUMBER = 14;
    private double adjassetps_;
    /**
     * <code>optional double adjassetps = 14;</code>
     *
     * <pre>
     * 调整每股净资 C13 
     * </pre>
     */
    public boolean hasAdjassetps() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional double adjassetps = 14;</code>
     *
     * <pre>
     * 调整每股净资 C13 
     * </pre>
     */
    public double getAdjassetps() {
      return adjassetps_;
    }

    public static final int ASSET_FIELD_NUMBER = 15;
    private double asset_;
    /**
     * <code>optional double asset = 15;</code>
     *
     * <pre>
     * 总资产 C14   
     * </pre>
     */
    public boolean hasAsset() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional double asset = 15;</code>
     *
     * <pre>
     * 总资产 C14   
     * </pre>
     */
    public double getAsset() {
      return asset_;
    }

    public static final int FLOATASSET_FIELD_NUMBER = 16;
    private double floatasset_;
    /**
     * <code>optional double floatasset = 16;</code>
     *
     * <pre>
     * 流动资产 C15
     * </pre>
     */
    public boolean hasFloatasset() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional double floatasset = 16;</code>
     *
     * <pre>
     * 流动资产 C15
     * </pre>
     */
    public double getFloatasset() {
      return floatasset_;
    }

    public static final int FIXEDASSET_FIELD_NUMBER = 17;
    private double fixedasset_;
    /**
     * <code>optional double fixedasset = 17;</code>
     *
     * <pre>
     * 固定资产 C16
     * </pre>
     */
    public boolean hasFixedasset() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional double fixedasset = 17;</code>
     *
     * <pre>
     * 固定资产 C16
     * </pre>
     */
    public double getFixedasset() {
      return fixedasset_;
    }

    public static final int INTASSET_FIELD_NUMBER = 18;
    private double intasset_;
    /**
     * <code>optional double intasset = 18;</code>
     *
     * <pre>
     * 无形资产 C17   
     * </pre>
     */
    public boolean hasIntasset() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional double intasset = 18;</code>
     *
     * <pre>
     * 无形资产 C17   
     * </pre>
     */
    public double getIntasset() {
      return intasset_;
    }

    public static final int FLOATDEBET_FIELD_NUMBER = 19;
    private double floatdebet_;
    /**
     * <code>optional double floatdebet = 19;</code>
     *
     * <pre>
     * 流动负债 C18
     * </pre>
     */
    public boolean hasFloatdebet() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional double floatdebet = 19;</code>
     *
     * <pre>
     * 流动负债 C18
     * </pre>
     */
    public double getFloatdebet() {
      return floatdebet_;
    }

    public static final int LONGDEBET_FIELD_NUMBER = 20;
    private double longdebet_;
    /**
     * <code>optional double longdebet = 20;</code>
     *
     * <pre>
     * 长期负债 C19
     * </pre>
     */
    public boolean hasLongdebet() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional double longdebet = 20;</code>
     *
     * <pre>
     * 长期负债 C19
     * </pre>
     */
    public double getLongdebet() {
      return longdebet_;
    }

    public static final int ALLDEBET_FIELD_NUMBER = 21;
    private double alldebet_;
    /**
     * <code>optional double alldebet = 21;</code>
     *
     * <pre>
     * 总负债 C20
     * </pre>
     */
    public boolean hasAlldebet() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional double alldebet = 21;</code>
     *
     * <pre>
     * 总负债 C20
     * </pre>
     */
    public double getAlldebet() {
      return alldebet_;
    }

    public static final int HODEREQUITY_FIELD_NUMBER = 22;
    private double hoderequity_;
    /**
     * <code>optional double hoderequity = 22;</code>
     *
     * <pre>
     * 股东权益 C21
     * </pre>
     */
    public boolean hasHoderequity() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional double hoderequity = 22;</code>
     *
     * <pre>
     * 股东权益 C21
     * </pre>
     */
    public double getHoderequity() {
      return hoderequity_;
    }

    public static final int CAPITALFUND_FIELD_NUMBER = 23;
    private double capitalfund_;
    /**
     * <code>optional double capitalfund = 23;</code>
     *
     * <pre>
     * 资本公积金 C22
     * </pre>
     */
    public boolean hasCapitalfund() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional double capitalfund = 23;</code>
     *
     * <pre>
     * 资本公积金 C22
     * </pre>
     */
    public double getCapitalfund() {
      return capitalfund_;
    }

    public static final int CASHFLOAT_FIELD_NUMBER = 24;
    private double cashfloat_;
    /**
     * <code>optional double cashfloat = 24;</code>
     *
     * <pre>
     * 经营现金流量 C23
     * </pre>
     */
    public boolean hasCashfloat() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional double cashfloat = 24;</code>
     *
     * <pre>
     * 经营现金流量 C23
     * </pre>
     */
    public double getCashfloat() {
      return cashfloat_;
    }

    public static final int INVESTFLOAT_FIELD_NUMBER = 25;
    private double investfloat_;
    /**
     * <code>optional double investfloat = 25;</code>
     *
     * <pre>
     * 投资现金流量 C24
     * </pre>
     */
    public boolean hasInvestfloat() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional double investfloat = 25;</code>
     *
     * <pre>
     * 投资现金流量 C24
     * </pre>
     */
    public double getInvestfloat() {
      return investfloat_;
    }

    public static final int RAISEFLOAT_FIELD_NUMBER = 26;
    private double raisefloat_;
    /**
     * <code>optional double raisefloat = 26;</code>
     *
     * <pre>
     * 筹资现金流量 C25
     * </pre>
     */
    public boolean hasRaisefloat() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional double raisefloat = 26;</code>
     *
     * <pre>
     * 筹资现金流量 C25
     * </pre>
     */
    public double getRaisefloat() {
      return raisefloat_;
    }

    public static final int CASHINC_FIELD_NUMBER = 27;
    private double cashinc_;
    /**
     * <code>optional double cashinc = 27;</code>
     *
     * <pre>
     * 现金增加额 C26 
     * </pre>
     */
    public boolean hasCashinc() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional double cashinc = 27;</code>
     *
     * <pre>
     * 现金增加额 C26 
     * </pre>
     */
    public double getCashinc() {
      return cashinc_;
    }

    public static final int MAININCOME_FIELD_NUMBER = 28;
    private double mainincome_;
    /**
     * <code>optional double mainincome = 28;</code>
     *
     * <pre>
     * 主营收入 C27 
     * </pre>
     */
    public boolean hasMainincome() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional double mainincome = 28;</code>
     *
     * <pre>
     * 主营收入 C27 
     * </pre>
     */
    public double getMainincome() {
      return mainincome_;
    }

    public static final int MAINPROFIT_FIELD_NUMBER = 29;
    private double mainprofit_;
    /**
     * <code>optional double mainprofit = 29;</code>
     *
     * <pre>
     * 主营利润 C28
     * </pre>
     */
    public boolean hasMainprofit() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional double mainprofit = 29;</code>
     *
     * <pre>
     * 主营利润 C28
     * </pre>
     */
    public double getMainprofit() {
      return mainprofit_;
    }

    public static final int TRADEPROFIT_FIELD_NUMBER = 30;
    private double tradeprofit_;
    /**
     * <code>optional double tradeprofit = 30;</code>
     *
     * <pre>
     * 营业利润 C29
     * </pre>
     */
    public boolean hasTradeprofit() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional double tradeprofit = 30;</code>
     *
     * <pre>
     * 营业利润 C29
     * </pre>
     */
    public double getTradeprofit() {
      return tradeprofit_;
    }

    public static final int INVESTPROFIT_FIELD_NUMBER = 31;
    private double investprofit_;
    /**
     * <code>optional double investprofit = 31;</code>
     *
     * <pre>
     * 投资收益 C30
     * </pre>
     */
    public boolean hasInvestprofit() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional double investprofit = 31;</code>
     *
     * <pre>
     * 投资收益 C30
     * </pre>
     */
    public double getInvestprofit() {
      return investprofit_;
    }

    public static final int OTHERBALANCE_FIELD_NUMBER = 32;
    private double otherbalance_;
    /**
     * <code>optional double otherbalance = 32;</code>
     *
     * <pre>
     * 营业外收支 C31
     * </pre>
     */
    public boolean hasOtherbalance() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional double otherbalance = 32;</code>
     *
     * <pre>
     * 营业外收支 C31
     * </pre>
     */
    public double getOtherbalance() {
      return otherbalance_;
    }

    public static final int ALLPROFIT_FIELD_NUMBER = 33;
    private double allprofit_;
    /**
     * <code>optional double allprofit = 33;</code>
     *
     * <pre>
     * 利润总额 C32
     * </pre>
     */
    public boolean hasAllprofit() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double allprofit = 33;</code>
     *
     * <pre>
     * 利润总额 C32
     * </pre>
     */
    public double getAllprofit() {
      return allprofit_;
    }

    public static final int NETPROFIT_FIELD_NUMBER = 34;
    private double netprofit_;
    /**
     * <code>optional double netprofit = 34;</code>
     *
     * <pre>
     * 净利润 C33
     * </pre>
     */
    public boolean hasNetprofit() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double netprofit = 34;</code>
     *
     * <pre>
     * 净利润 C33
     * </pre>
     */
    public double getNetprofit() {
      return netprofit_;
    }

    public static final int UNAPPROPROFIT_FIELD_NUMBER = 35;
    private double unapproprofit_;
    /**
     * <code>optional double unapproprofit = 35;</code>
     *
     * <pre>
     * 未分配利润 C34
     * </pre>
     */
    public boolean hasUnapproprofit() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double unapproprofit = 35;</code>
     *
     * <pre>
     * 未分配利润 C34
     * </pre>
     */
    public double getUnapproprofit() {
      return unapproprofit_;
    }

    public static final int TOTALSHARE_FIELD_NUMBER = 36;
    private double totalshare_;
    /**
     * <code>optional double totalshare = 36;</code>
     *
     * <pre>
     * 总股本 C1
     * </pre>
     */
    public boolean hasTotalshare() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double totalshare = 36;</code>
     *
     * <pre>
     * 总股本 C1
     * </pre>
     */
    public double getTotalshare() {
      return totalshare_;
    }

    public static final int NORESTRICTSHARE_FIELD_NUMBER = 37;
    private double norestrictshare_;
    /**
     * <code>optional double norestrictshare = 37;</code>
     *
     * <pre>
     * 无限售股份合计 C36
     * </pre>
     */
    public boolean hasNorestrictshare() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double norestrictshare = 37;</code>
     *
     * <pre>
     * 无限售股份合计 C36
     * </pre>
     */
    public double getNorestrictshare() {
      return norestrictshare_;
    }

    public static final int ASHARE_FIELD_NUMBER = 38;
    private double ashare_;
    /**
     * <code>optional double ashare = 38;</code>
     *
     * <pre>
     * A股 C37
     * </pre>
     */
    public boolean hasAshare() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double ashare = 38;</code>
     *
     * <pre>
     * A股 C37
     * </pre>
     */
    public double getAshare() {
      return ashare_;
    }

    public static final int BSHARE_FIELD_NUMBER = 39;
    private double bshare_;
    /**
     * <code>optional double bshare = 39;</code>
     *
     * <pre>
     * B股 C38
     * </pre>
     */
    public boolean hasBshare() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double bshare = 39;</code>
     *
     * <pre>
     * B股 C38
     * </pre>
     */
    public double getBshare() {
      return bshare_;
    }

    public static final int FOREIGNSHARE_FIELD_NUMBER = 40;
    private double foreignshare_;
    /**
     * <code>optional double foreignshare = 40;</code>
     *
     * <pre>
     * 境外上市外资股 C39
     * </pre>
     */
    public boolean hasForeignshare() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double foreignshare = 40;</code>
     *
     * <pre>
     * 境外上市外资股 C39
     * </pre>
     */
    public double getForeignshare() {
      return foreignshare_;
    }

    public static final int OTHERFLOATSHARE_FIELD_NUMBER = 41;
    private double otherfloatshare_;
    /**
     * <code>optional double otherfloatshare = 41;</code>
     *
     * <pre>
     * 其他流通股份 C40
     * </pre>
     */
    public boolean hasOtherfloatshare() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double otherfloatshare = 41;</code>
     *
     * <pre>
     * 其他流通股份 C40
     * </pre>
     */
    public double getOtherfloatshare() {
      return otherfloatshare_;
    }

    public static final int RESTRICTSHARE_FIELD_NUMBER = 42;
    private double restrictshare_;
    /**
     * <code>optional double restrictshare = 42;</code>
     *
     * <pre>
     * 限售股份合计 C41
     * </pre>
     */
    public boolean hasRestrictshare() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double restrictshare = 42;</code>
     *
     * <pre>
     * 限售股份合计 C41
     * </pre>
     */
    public double getRestrictshare() {
      return restrictshare_;
    }

    public static final int NATIONSHARE_FIELD_NUMBER = 43;
    private double nationshare_;
    /**
     * <code>optional double nationshare = 43;</code>
     *
     * <pre>
     * 国家持股 C42
     * </pre>
     */
    public boolean hasNationshare() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional double nationshare = 43;</code>
     *
     * <pre>
     * 国家持股 C42
     * </pre>
     */
    public double getNationshare() {
      return nationshare_;
    }

    public static final int NATCORPSHARE_FIELD_NUMBER = 44;
    private double natcorpshare_;
    /**
     * <code>optional double natcorpshare = 44;</code>
     *
     * <pre>
     * 国有法人持股 C43 
     * </pre>
     */
    public boolean hasNatcorpshare() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional double natcorpshare = 44;</code>
     *
     * <pre>
     * 国有法人持股 C43 
     * </pre>
     */
    public double getNatcorpshare() {
      return natcorpshare_;
    }

    public static final int DOMESTCORPSHARE_FIELD_NUMBER = 45;
    private double domestcorpshare_;
    /**
     * <code>optional double domestcorpshare = 45;</code>
     *
     * <pre>
     * 境内法人持股 C44
     * </pre>
     */
    public boolean hasDomestcorpshare() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional double domestcorpshare = 45;</code>
     *
     * <pre>
     * 境内法人持股 C44
     * </pre>
     */
    public double getDomestcorpshare() {
      return domestcorpshare_;
    }

    public static final int DOMESTINDSHARE_FIELD_NUMBER = 46;
    private double domestindshare_;
    /**
     * <code>optional double domestindshare = 46;</code>
     *
     * <pre>
     * 境内自然人持股 C45
     * </pre>
     */
    public boolean hasDomestindshare() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional double domestindshare = 46;</code>
     *
     * <pre>
     * 境内自然人持股 C45
     * </pre>
     */
    public double getDomestindshare() {
      return domestindshare_;
    }

    public static final int OTHERLAUNCHSHARE_FIELD_NUMBER = 47;
    private double otherlaunchshare_;
    /**
     * <code>optional double otherlaunchshare = 47;</code>
     *
     * <pre>
     * 其他发起人股份 C46
     * </pre>
     */
    public boolean hasOtherlaunchshare() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional double otherlaunchshare = 47;</code>
     *
     * <pre>
     * 其他发起人股份 C46
     * </pre>
     */
    public double getOtherlaunchshare() {
      return otherlaunchshare_;
    }

    public static final int RAISECORPSHARE_FIELD_NUMBER = 48;
    private double raisecorpshare_;
    /**
     * <code>optional double raisecorpshare = 48;</code>
     *
     * <pre>
     * 募集法人股份 C47
     * </pre>
     */
    public boolean hasRaisecorpshare() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional double raisecorpshare = 48;</code>
     *
     * <pre>
     * 募集法人股份 C47
     * </pre>
     */
    public double getRaisecorpshare() {
      return raisecorpshare_;
    }

    public static final int FOREIGNCORPSHARE_FIELD_NUMBER = 49;
    private double foreigncorpshare_;
    /**
     * <code>optional double foreigncorpshare = 49;</code>
     *
     * <pre>
     * 境外法人持股 C48
     * </pre>
     */
    public boolean hasForeigncorpshare() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional double foreigncorpshare = 49;</code>
     *
     * <pre>
     * 境外法人持股 C48
     * </pre>
     */
    public double getForeigncorpshare() {
      return foreigncorpshare_;
    }

    public static final int FOREINGINDSHARE_FIELD_NUMBER = 50;
    private double foreingIndshare_;
    /**
     * <code>optional double foreingIndshare = 50;</code>
     *
     * <pre>
     * 境外自然人持股 C49
     * </pre>
     */
    public boolean hasForeingIndshare() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional double foreingIndshare = 50;</code>
     *
     * <pre>
     * 境外自然人持股 C49
     * </pre>
     */
    public double getForeingIndshare() {
      return foreingIndshare_;
    }

    public static final int PREFOROTHERSHARE_FIELD_NUMBER = 51;
    private double preforothershare_;
    /**
     * <code>optional double preforothershare = 51;</code>
     *
     * <pre>
     * 优先股或其他 C50	
     * </pre>
     */
    public boolean hasPreforothershare() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional double preforothershare = 51;</code>
     *
     * <pre>
     * 优先股或其他 C50	
     * </pre>
     */
    public double getPreforothershare() {
      return preforothershare_;
    }

    private void initFields() {
      obj_ = "";
      repdate_ = "";
      floatdate_ = 0L;
      earnps_ = 0D;
      assetps_ = 0D;
      rona_ = 0D;
      cashps_ = 0D;
      accufundps_ = 0D;
      unapproprofitps_ = 0D;
      rateonequity_ = 0D;
      profitinc_ = 0D;
      incomeinc_ = 0D;
      grossprofit_ = 0D;
      adjassetps_ = 0D;
      asset_ = 0D;
      floatasset_ = 0D;
      fixedasset_ = 0D;
      intasset_ = 0D;
      floatdebet_ = 0D;
      longdebet_ = 0D;
      alldebet_ = 0D;
      hoderequity_ = 0D;
      capitalfund_ = 0D;
      cashfloat_ = 0D;
      investfloat_ = 0D;
      raisefloat_ = 0D;
      cashinc_ = 0D;
      mainincome_ = 0D;
      mainprofit_ = 0D;
      tradeprofit_ = 0D;
      investprofit_ = 0D;
      otherbalance_ = 0D;
      allprofit_ = 0D;
      netprofit_ = 0D;
      unapproprofit_ = 0D;
      totalshare_ = 0D;
      norestrictshare_ = 0D;
      ashare_ = 0D;
      bshare_ = 0D;
      foreignshare_ = 0D;
      otherfloatshare_ = 0D;
      restrictshare_ = 0D;
      nationshare_ = 0D;
      natcorpshare_ = 0D;
      domestcorpshare_ = 0D;
      domestindshare_ = 0D;
      otherlaunchshare_ = 0D;
      raisecorpshare_ = 0D;
      foreigncorpshare_ = 0D;
      foreingIndshare_ = 0D;
      preforothershare_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasObj()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRepdate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getObjBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getRepdateBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, floatdate_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, earnps_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, assetps_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, rona_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, cashps_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, accufundps_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, unapproprofitps_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, rateonequity_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(11, profitinc_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(12, incomeinc_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(13, grossprofit_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(14, adjassetps_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeDouble(15, asset_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeDouble(16, floatasset_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeDouble(17, fixedasset_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeDouble(18, intasset_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeDouble(19, floatdebet_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeDouble(20, longdebet_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeDouble(21, alldebet_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeDouble(22, hoderequity_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeDouble(23, capitalfund_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeDouble(24, cashfloat_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeDouble(25, investfloat_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeDouble(26, raisefloat_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeDouble(27, cashinc_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeDouble(28, mainincome_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeDouble(29, mainprofit_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeDouble(30, tradeprofit_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeDouble(31, investprofit_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeDouble(32, otherbalance_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(33, allprofit_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(34, netprofit_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(35, unapproprofit_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(36, totalshare_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(37, norestrictshare_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(38, ashare_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(39, bshare_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(40, foreignshare_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(41, otherfloatshare_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(42, restrictshare_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(43, nationshare_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(44, natcorpshare_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeDouble(45, domestcorpshare_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeDouble(46, domestindshare_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeDouble(47, otherlaunchshare_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeDouble(48, raisecorpshare_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeDouble(49, foreigncorpshare_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeDouble(50, foreingIndshare_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeDouble(51, preforothershare_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getObjBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getRepdateBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, floatdate_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, earnps_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, assetps_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, rona_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, cashps_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, accufundps_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, unapproprofitps_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, rateonequity_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, profitinc_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, incomeinc_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, grossprofit_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, adjassetps_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, asset_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, floatasset_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, fixedasset_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, intasset_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, floatdebet_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, longdebet_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, alldebet_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, hoderequity_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(23, capitalfund_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(24, cashfloat_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, investfloat_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(26, raisefloat_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(27, cashinc_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(28, mainincome_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(29, mainprofit_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(30, tradeprofit_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(31, investprofit_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(32, otherbalance_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(33, allprofit_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(34, netprofit_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(35, unapproprofit_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(36, totalshare_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(37, norestrictshare_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(38, ashare_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(39, bshare_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(40, foreignshare_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(41, otherfloatshare_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(42, restrictshare_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(43, nationshare_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(44, natcorpshare_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(45, domestcorpshare_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(46, domestindshare_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(47, otherlaunchshare_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(48, raisecorpshare_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(49, foreigncorpshare_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(50, foreingIndshare_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(51, preforothershare_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzhyun.BasicFinanceData}
     *
     * <pre>
     * 基本财务数据 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dzhyun.BasicFinanceData)
        com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_BasicFinanceData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_BasicFinanceData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.class, com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.Builder.class);
      }

      // Construct using com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        obj_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        repdate_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        floatdate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        earnps_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        assetps_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        rona_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        cashps_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        accufundps_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        unapproprofitps_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        rateonequity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        profitinc_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        incomeinc_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        grossprofit_ = 0D;
        bitField0_ = (bitField0_ & ~0x00001000);
        adjassetps_ = 0D;
        bitField0_ = (bitField0_ & ~0x00002000);
        asset_ = 0D;
        bitField0_ = (bitField0_ & ~0x00004000);
        floatasset_ = 0D;
        bitField0_ = (bitField0_ & ~0x00008000);
        fixedasset_ = 0D;
        bitField0_ = (bitField0_ & ~0x00010000);
        intasset_ = 0D;
        bitField0_ = (bitField0_ & ~0x00020000);
        floatdebet_ = 0D;
        bitField0_ = (bitField0_ & ~0x00040000);
        longdebet_ = 0D;
        bitField0_ = (bitField0_ & ~0x00080000);
        alldebet_ = 0D;
        bitField0_ = (bitField0_ & ~0x00100000);
        hoderequity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00200000);
        capitalfund_ = 0D;
        bitField0_ = (bitField0_ & ~0x00400000);
        cashfloat_ = 0D;
        bitField0_ = (bitField0_ & ~0x00800000);
        investfloat_ = 0D;
        bitField0_ = (bitField0_ & ~0x01000000);
        raisefloat_ = 0D;
        bitField0_ = (bitField0_ & ~0x02000000);
        cashinc_ = 0D;
        bitField0_ = (bitField0_ & ~0x04000000);
        mainincome_ = 0D;
        bitField0_ = (bitField0_ & ~0x08000000);
        mainprofit_ = 0D;
        bitField0_ = (bitField0_ & ~0x10000000);
        tradeprofit_ = 0D;
        bitField0_ = (bitField0_ & ~0x20000000);
        investprofit_ = 0D;
        bitField0_ = (bitField0_ & ~0x40000000);
        otherbalance_ = 0D;
        bitField0_ = (bitField0_ & ~0x80000000);
        allprofit_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000001);
        netprofit_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000002);
        unapproprofit_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000004);
        totalshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000008);
        norestrictshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000010);
        ashare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000020);
        bshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000040);
        foreignshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000080);
        otherfloatshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000100);
        restrictshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000200);
        nationshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000400);
        natcorpshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000800);
        domestcorpshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00001000);
        domestindshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00002000);
        otherlaunchshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00004000);
        raisecorpshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00008000);
        foreigncorpshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00010000);
        foreingIndshare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00020000);
        preforothershare_ = 0D;
        bitField1_ = (bitField1_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_BasicFinanceData_descriptor;
      }

      public com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData getDefaultInstanceForType() {
        return com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.getDefaultInstance();
      }

      public com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData build() {
        com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData buildPartial() {
        com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData result = new com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.obj_ = obj_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.repdate_ = repdate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.floatdate_ = floatdate_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.earnps_ = earnps_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.assetps_ = assetps_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.rona_ = rona_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cashps_ = cashps_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.accufundps_ = accufundps_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.unapproprofitps_ = unapproprofitps_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.rateonequity_ = rateonequity_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.profitinc_ = profitinc_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.incomeinc_ = incomeinc_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.grossprofit_ = grossprofit_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.adjassetps_ = adjassetps_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.asset_ = asset_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.floatasset_ = floatasset_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.fixedasset_ = fixedasset_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.intasset_ = intasset_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.floatdebet_ = floatdebet_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.longdebet_ = longdebet_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.alldebet_ = alldebet_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.hoderequity_ = hoderequity_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.capitalfund_ = capitalfund_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.cashfloat_ = cashfloat_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.investfloat_ = investfloat_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.raisefloat_ = raisefloat_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.cashinc_ = cashinc_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.mainincome_ = mainincome_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.mainprofit_ = mainprofit_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.tradeprofit_ = tradeprofit_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.investprofit_ = investprofit_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.otherbalance_ = otherbalance_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.allprofit_ = allprofit_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.netprofit_ = netprofit_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.unapproprofit_ = unapproprofit_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.totalshare_ = totalshare_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.norestrictshare_ = norestrictshare_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.ashare_ = ashare_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.bshare_ = bshare_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.foreignshare_ = foreignshare_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.otherfloatshare_ = otherfloatshare_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.restrictshare_ = restrictshare_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.nationshare_ = nationshare_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.natcorpshare_ = natcorpshare_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.domestcorpshare_ = domestcorpshare_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.domestindshare_ = domestindshare_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.otherlaunchshare_ = otherlaunchshare_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.raisecorpshare_ = raisecorpshare_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.foreigncorpshare_ = foreigncorpshare_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.foreingIndshare_ = foreingIndshare_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.preforothershare_ = preforothershare_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData) {
          return mergeFrom((com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData other) {
        if (other == com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData.getDefaultInstance()) return this;
        if (other.hasObj()) {
          bitField0_ |= 0x00000001;
          obj_ = other.obj_;
          onChanged();
        }
        if (other.hasRepdate()) {
          bitField0_ |= 0x00000002;
          repdate_ = other.repdate_;
          onChanged();
        }
        if (other.hasFloatdate()) {
          setFloatdate(other.getFloatdate());
        }
        if (other.hasEarnps()) {
          setEarnps(other.getEarnps());
        }
        if (other.hasAssetps()) {
          setAssetps(other.getAssetps());
        }
        if (other.hasRona()) {
          setRona(other.getRona());
        }
        if (other.hasCashps()) {
          setCashps(other.getCashps());
        }
        if (other.hasAccufundps()) {
          setAccufundps(other.getAccufundps());
        }
        if (other.hasUnapproprofitps()) {
          setUnapproprofitps(other.getUnapproprofitps());
        }
        if (other.hasRateonequity()) {
          setRateonequity(other.getRateonequity());
        }
        if (other.hasProfitinc()) {
          setProfitinc(other.getProfitinc());
        }
        if (other.hasIncomeinc()) {
          setIncomeinc(other.getIncomeinc());
        }
        if (other.hasGrossprofit()) {
          setGrossprofit(other.getGrossprofit());
        }
        if (other.hasAdjassetps()) {
          setAdjassetps(other.getAdjassetps());
        }
        if (other.hasAsset()) {
          setAsset(other.getAsset());
        }
        if (other.hasFloatasset()) {
          setFloatasset(other.getFloatasset());
        }
        if (other.hasFixedasset()) {
          setFixedasset(other.getFixedasset());
        }
        if (other.hasIntasset()) {
          setIntasset(other.getIntasset());
        }
        if (other.hasFloatdebet()) {
          setFloatdebet(other.getFloatdebet());
        }
        if (other.hasLongdebet()) {
          setLongdebet(other.getLongdebet());
        }
        if (other.hasAlldebet()) {
          setAlldebet(other.getAlldebet());
        }
        if (other.hasHoderequity()) {
          setHoderequity(other.getHoderequity());
        }
        if (other.hasCapitalfund()) {
          setCapitalfund(other.getCapitalfund());
        }
        if (other.hasCashfloat()) {
          setCashfloat(other.getCashfloat());
        }
        if (other.hasInvestfloat()) {
          setInvestfloat(other.getInvestfloat());
        }
        if (other.hasRaisefloat()) {
          setRaisefloat(other.getRaisefloat());
        }
        if (other.hasCashinc()) {
          setCashinc(other.getCashinc());
        }
        if (other.hasMainincome()) {
          setMainincome(other.getMainincome());
        }
        if (other.hasMainprofit()) {
          setMainprofit(other.getMainprofit());
        }
        if (other.hasTradeprofit()) {
          setTradeprofit(other.getTradeprofit());
        }
        if (other.hasInvestprofit()) {
          setInvestprofit(other.getInvestprofit());
        }
        if (other.hasOtherbalance()) {
          setOtherbalance(other.getOtherbalance());
        }
        if (other.hasAllprofit()) {
          setAllprofit(other.getAllprofit());
        }
        if (other.hasNetprofit()) {
          setNetprofit(other.getNetprofit());
        }
        if (other.hasUnapproprofit()) {
          setUnapproprofit(other.getUnapproprofit());
        }
        if (other.hasTotalshare()) {
          setTotalshare(other.getTotalshare());
        }
        if (other.hasNorestrictshare()) {
          setNorestrictshare(other.getNorestrictshare());
        }
        if (other.hasAshare()) {
          setAshare(other.getAshare());
        }
        if (other.hasBshare()) {
          setBshare(other.getBshare());
        }
        if (other.hasForeignshare()) {
          setForeignshare(other.getForeignshare());
        }
        if (other.hasOtherfloatshare()) {
          setOtherfloatshare(other.getOtherfloatshare());
        }
        if (other.hasRestrictshare()) {
          setRestrictshare(other.getRestrictshare());
        }
        if (other.hasNationshare()) {
          setNationshare(other.getNationshare());
        }
        if (other.hasNatcorpshare()) {
          setNatcorpshare(other.getNatcorpshare());
        }
        if (other.hasDomestcorpshare()) {
          setDomestcorpshare(other.getDomestcorpshare());
        }
        if (other.hasDomestindshare()) {
          setDomestindshare(other.getDomestindshare());
        }
        if (other.hasOtherlaunchshare()) {
          setOtherlaunchshare(other.getOtherlaunchshare());
        }
        if (other.hasRaisecorpshare()) {
          setRaisecorpshare(other.getRaisecorpshare());
        }
        if (other.hasForeigncorpshare()) {
          setForeigncorpshare(other.getForeigncorpshare());
        }
        if (other.hasForeingIndshare()) {
          setForeingIndshare(other.getForeingIndshare());
        }
        if (other.hasPreforothershare()) {
          setPreforothershare(other.getPreforothershare());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasObj()) {
          
          return false;
        }
        if (!hasRepdate()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dzhyun.proto.CldCaiWuShuJu.BasicFinanceData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private java.lang.Object obj_ = "";
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public boolean hasObj() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public java.lang.String getObj() {
        java.lang.Object ref = obj_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            obj_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getObjBytes() {
        java.lang.Object ref = obj_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          obj_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public Builder setObj(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        obj_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public Builder clearObj() {
        bitField0_ = (bitField0_ & ~0x00000001);
        obj_ = getDefaultInstance().getObj();
        onChanged();
        return this;
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public Builder setObjBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        obj_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object repdate_ = "";
      /**
       * <code>required string repdate = 2;</code>
       *
       * <pre>
       * 报告期YYYYMMDDttmmss EndDate
       * </pre>
       */
      public boolean hasRepdate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string repdate = 2;</code>
       *
       * <pre>
       * 报告期YYYYMMDDttmmss EndDate
       * </pre>
       */
      public java.lang.String getRepdate() {
        java.lang.Object ref = repdate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            repdate_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string repdate = 2;</code>
       *
       * <pre>
       * 报告期YYYYMMDDttmmss EndDate
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRepdateBytes() {
        java.lang.Object ref = repdate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          repdate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string repdate = 2;</code>
       *
       * <pre>
       * 报告期YYYYMMDDttmmss EndDate
       * </pre>
       */
      public Builder setRepdate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        repdate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string repdate = 2;</code>
       *
       * <pre>
       * 报告期YYYYMMDDttmmss EndDate
       * </pre>
       */
      public Builder clearRepdate() {
        bitField0_ = (bitField0_ & ~0x00000002);
        repdate_ = getDefaultInstance().getRepdate();
        onChanged();
        return this;
      }
      /**
       * <code>required string repdate = 2;</code>
       *
       * <pre>
       * 报告期YYYYMMDDttmmss EndDate
       * </pre>
       */
      public Builder setRepdateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        repdate_ = value;
        onChanged();
        return this;
      }

      private long floatdate_ ;
      /**
       * <code>optional int64 floatdate = 3;</code>
       *
       * <pre>
       * 上市期YYYYMMDDttmmss C35
       * </pre>
       */
      public boolean hasFloatdate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 floatdate = 3;</code>
       *
       * <pre>
       * 上市期YYYYMMDDttmmss C35
       * </pre>
       */
      public long getFloatdate() {
        return floatdate_;
      }
      /**
       * <code>optional int64 floatdate = 3;</code>
       *
       * <pre>
       * 上市期YYYYMMDDttmmss C35
       * </pre>
       */
      public Builder setFloatdate(long value) {
        bitField0_ |= 0x00000004;
        floatdate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 floatdate = 3;</code>
       *
       * <pre>
       * 上市期YYYYMMDDttmmss C35
       * </pre>
       */
      public Builder clearFloatdate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        floatdate_ = 0L;
        onChanged();
        return this;
      }

      private double earnps_ ;
      /**
       * <code>optional double earnps = 4;</code>
       *
       * <pre>
       * 每股收益 C3   
       * </pre>
       */
      public boolean hasEarnps() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double earnps = 4;</code>
       *
       * <pre>
       * 每股收益 C3   
       * </pre>
       */
      public double getEarnps() {
        return earnps_;
      }
      /**
       * <code>optional double earnps = 4;</code>
       *
       * <pre>
       * 每股收益 C3   
       * </pre>
       */
      public Builder setEarnps(double value) {
        bitField0_ |= 0x00000008;
        earnps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double earnps = 4;</code>
       *
       * <pre>
       * 每股收益 C3   
       * </pre>
       */
      public Builder clearEarnps() {
        bitField0_ = (bitField0_ & ~0x00000008);
        earnps_ = 0D;
        onChanged();
        return this;
      }

      private double assetps_ ;
      /**
       * <code>optional double assetps = 5;</code>
       *
       * <pre>
       * 每股净资产 C4
       * </pre>
       */
      public boolean hasAssetps() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double assetps = 5;</code>
       *
       * <pre>
       * 每股净资产 C4
       * </pre>
       */
      public double getAssetps() {
        return assetps_;
      }
      /**
       * <code>optional double assetps = 5;</code>
       *
       * <pre>
       * 每股净资产 C4
       * </pre>
       */
      public Builder setAssetps(double value) {
        bitField0_ |= 0x00000010;
        assetps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double assetps = 5;</code>
       *
       * <pre>
       * 每股净资产 C4
       * </pre>
       */
      public Builder clearAssetps() {
        bitField0_ = (bitField0_ & ~0x00000010);
        assetps_ = 0D;
        onChanged();
        return this;
      }

      private double rona_ ;
      /**
       * <code>optional double rona = 6;</code>
       *
       * <pre>
       * 净资产收益率 C5
       * </pre>
       */
      public boolean hasRona() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double rona = 6;</code>
       *
       * <pre>
       * 净资产收益率 C5
       * </pre>
       */
      public double getRona() {
        return rona_;
      }
      /**
       * <code>optional double rona = 6;</code>
       *
       * <pre>
       * 净资产收益率 C5
       * </pre>
       */
      public Builder setRona(double value) {
        bitField0_ |= 0x00000020;
        rona_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double rona = 6;</code>
       *
       * <pre>
       * 净资产收益率 C5
       * </pre>
       */
      public Builder clearRona() {
        bitField0_ = (bitField0_ & ~0x00000020);
        rona_ = 0D;
        onChanged();
        return this;
      }

      private double cashps_ ;
      /**
       * <code>optional double cashps = 7;</code>
       *
       * <pre>
       * 每股经营现金 C6
       * </pre>
       */
      public boolean hasCashps() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double cashps = 7;</code>
       *
       * <pre>
       * 每股经营现金 C6
       * </pre>
       */
      public double getCashps() {
        return cashps_;
      }
      /**
       * <code>optional double cashps = 7;</code>
       *
       * <pre>
       * 每股经营现金 C6
       * </pre>
       */
      public Builder setCashps(double value) {
        bitField0_ |= 0x00000040;
        cashps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cashps = 7;</code>
       *
       * <pre>
       * 每股经营现金 C6
       * </pre>
       */
      public Builder clearCashps() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cashps_ = 0D;
        onChanged();
        return this;
      }

      private double accufundps_ ;
      /**
       * <code>optional double accufundps = 8;</code>
       *
       * <pre>
       * 每股公积金 C7
       * </pre>
       */
      public boolean hasAccufundps() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double accufundps = 8;</code>
       *
       * <pre>
       * 每股公积金 C7
       * </pre>
       */
      public double getAccufundps() {
        return accufundps_;
      }
      /**
       * <code>optional double accufundps = 8;</code>
       *
       * <pre>
       * 每股公积金 C7
       * </pre>
       */
      public Builder setAccufundps(double value) {
        bitField0_ |= 0x00000080;
        accufundps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double accufundps = 8;</code>
       *
       * <pre>
       * 每股公积金 C7
       * </pre>
       */
      public Builder clearAccufundps() {
        bitField0_ = (bitField0_ & ~0x00000080);
        accufundps_ = 0D;
        onChanged();
        return this;
      }

      private double unapproprofitps_ ;
      /**
       * <code>optional double unapproprofitps = 9;</code>
       *
       * <pre>
       * 每股未分配 C8   
       * </pre>
       */
      public boolean hasUnapproprofitps() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double unapproprofitps = 9;</code>
       *
       * <pre>
       * 每股未分配 C8   
       * </pre>
       */
      public double getUnapproprofitps() {
        return unapproprofitps_;
      }
      /**
       * <code>optional double unapproprofitps = 9;</code>
       *
       * <pre>
       * 每股未分配 C8   
       * </pre>
       */
      public Builder setUnapproprofitps(double value) {
        bitField0_ |= 0x00000100;
        unapproprofitps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double unapproprofitps = 9;</code>
       *
       * <pre>
       * 每股未分配 C8   
       * </pre>
       */
      public Builder clearUnapproprofitps() {
        bitField0_ = (bitField0_ & ~0x00000100);
        unapproprofitps_ = 0D;
        onChanged();
        return this;
      }

      private double rateonequity_ ;
      /**
       * <code>optional double rateonequity = 10;</code>
       *
       * <pre>
       * 股东权益比 C9
       * </pre>
       */
      public boolean hasRateonequity() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double rateonequity = 10;</code>
       *
       * <pre>
       * 股东权益比 C9
       * </pre>
       */
      public double getRateonequity() {
        return rateonequity_;
      }
      /**
       * <code>optional double rateonequity = 10;</code>
       *
       * <pre>
       * 股东权益比 C9
       * </pre>
       */
      public Builder setRateonequity(double value) {
        bitField0_ |= 0x00000200;
        rateonequity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double rateonequity = 10;</code>
       *
       * <pre>
       * 股东权益比 C9
       * </pre>
       */
      public Builder clearRateonequity() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rateonequity_ = 0D;
        onChanged();
        return this;
      }

      private double profitinc_ ;
      /**
       * <code>optional double profitinc = 11;</code>
       *
       * <pre>
       * 净利润同比 C10  
       * </pre>
       */
      public boolean hasProfitinc() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional double profitinc = 11;</code>
       *
       * <pre>
       * 净利润同比 C10  
       * </pre>
       */
      public double getProfitinc() {
        return profitinc_;
      }
      /**
       * <code>optional double profitinc = 11;</code>
       *
       * <pre>
       * 净利润同比 C10  
       * </pre>
       */
      public Builder setProfitinc(double value) {
        bitField0_ |= 0x00000400;
        profitinc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double profitinc = 11;</code>
       *
       * <pre>
       * 净利润同比 C10  
       * </pre>
       */
      public Builder clearProfitinc() {
        bitField0_ = (bitField0_ & ~0x00000400);
        profitinc_ = 0D;
        onChanged();
        return this;
      }

      private double incomeinc_ ;
      /**
       * <code>optional double incomeinc = 12;</code>
       *
       * <pre>
       * 主营收入同比 C11  
       * </pre>
       */
      public boolean hasIncomeinc() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional double incomeinc = 12;</code>
       *
       * <pre>
       * 主营收入同比 C11  
       * </pre>
       */
      public double getIncomeinc() {
        return incomeinc_;
      }
      /**
       * <code>optional double incomeinc = 12;</code>
       *
       * <pre>
       * 主营收入同比 C11  
       * </pre>
       */
      public Builder setIncomeinc(double value) {
        bitField0_ |= 0x00000800;
        incomeinc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double incomeinc = 12;</code>
       *
       * <pre>
       * 主营收入同比 C11  
       * </pre>
       */
      public Builder clearIncomeinc() {
        bitField0_ = (bitField0_ & ~0x00000800);
        incomeinc_ = 0D;
        onChanged();
        return this;
      }

      private double grossprofit_ ;
      /**
       * <code>optional double grossprofit = 13;</code>
       *
       * <pre>
       * 销售毛利率 C12
       * </pre>
       */
      public boolean hasGrossprofit() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional double grossprofit = 13;</code>
       *
       * <pre>
       * 销售毛利率 C12
       * </pre>
       */
      public double getGrossprofit() {
        return grossprofit_;
      }
      /**
       * <code>optional double grossprofit = 13;</code>
       *
       * <pre>
       * 销售毛利率 C12
       * </pre>
       */
      public Builder setGrossprofit(double value) {
        bitField0_ |= 0x00001000;
        grossprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double grossprofit = 13;</code>
       *
       * <pre>
       * 销售毛利率 C12
       * </pre>
       */
      public Builder clearGrossprofit() {
        bitField0_ = (bitField0_ & ~0x00001000);
        grossprofit_ = 0D;
        onChanged();
        return this;
      }

      private double adjassetps_ ;
      /**
       * <code>optional double adjassetps = 14;</code>
       *
       * <pre>
       * 调整每股净资 C13 
       * </pre>
       */
      public boolean hasAdjassetps() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional double adjassetps = 14;</code>
       *
       * <pre>
       * 调整每股净资 C13 
       * </pre>
       */
      public double getAdjassetps() {
        return adjassetps_;
      }
      /**
       * <code>optional double adjassetps = 14;</code>
       *
       * <pre>
       * 调整每股净资 C13 
       * </pre>
       */
      public Builder setAdjassetps(double value) {
        bitField0_ |= 0x00002000;
        adjassetps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double adjassetps = 14;</code>
       *
       * <pre>
       * 调整每股净资 C13 
       * </pre>
       */
      public Builder clearAdjassetps() {
        bitField0_ = (bitField0_ & ~0x00002000);
        adjassetps_ = 0D;
        onChanged();
        return this;
      }

      private double asset_ ;
      /**
       * <code>optional double asset = 15;</code>
       *
       * <pre>
       * 总资产 C14   
       * </pre>
       */
      public boolean hasAsset() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional double asset = 15;</code>
       *
       * <pre>
       * 总资产 C14   
       * </pre>
       */
      public double getAsset() {
        return asset_;
      }
      /**
       * <code>optional double asset = 15;</code>
       *
       * <pre>
       * 总资产 C14   
       * </pre>
       */
      public Builder setAsset(double value) {
        bitField0_ |= 0x00004000;
        asset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double asset = 15;</code>
       *
       * <pre>
       * 总资产 C14   
       * </pre>
       */
      public Builder clearAsset() {
        bitField0_ = (bitField0_ & ~0x00004000);
        asset_ = 0D;
        onChanged();
        return this;
      }

      private double floatasset_ ;
      /**
       * <code>optional double floatasset = 16;</code>
       *
       * <pre>
       * 流动资产 C15
       * </pre>
       */
      public boolean hasFloatasset() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional double floatasset = 16;</code>
       *
       * <pre>
       * 流动资产 C15
       * </pre>
       */
      public double getFloatasset() {
        return floatasset_;
      }
      /**
       * <code>optional double floatasset = 16;</code>
       *
       * <pre>
       * 流动资产 C15
       * </pre>
       */
      public Builder setFloatasset(double value) {
        bitField0_ |= 0x00008000;
        floatasset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double floatasset = 16;</code>
       *
       * <pre>
       * 流动资产 C15
       * </pre>
       */
      public Builder clearFloatasset() {
        bitField0_ = (bitField0_ & ~0x00008000);
        floatasset_ = 0D;
        onChanged();
        return this;
      }

      private double fixedasset_ ;
      /**
       * <code>optional double fixedasset = 17;</code>
       *
       * <pre>
       * 固定资产 C16
       * </pre>
       */
      public boolean hasFixedasset() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional double fixedasset = 17;</code>
       *
       * <pre>
       * 固定资产 C16
       * </pre>
       */
      public double getFixedasset() {
        return fixedasset_;
      }
      /**
       * <code>optional double fixedasset = 17;</code>
       *
       * <pre>
       * 固定资产 C16
       * </pre>
       */
      public Builder setFixedasset(double value) {
        bitField0_ |= 0x00010000;
        fixedasset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double fixedasset = 17;</code>
       *
       * <pre>
       * 固定资产 C16
       * </pre>
       */
      public Builder clearFixedasset() {
        bitField0_ = (bitField0_ & ~0x00010000);
        fixedasset_ = 0D;
        onChanged();
        return this;
      }

      private double intasset_ ;
      /**
       * <code>optional double intasset = 18;</code>
       *
       * <pre>
       * 无形资产 C17   
       * </pre>
       */
      public boolean hasIntasset() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional double intasset = 18;</code>
       *
       * <pre>
       * 无形资产 C17   
       * </pre>
       */
      public double getIntasset() {
        return intasset_;
      }
      /**
       * <code>optional double intasset = 18;</code>
       *
       * <pre>
       * 无形资产 C17   
       * </pre>
       */
      public Builder setIntasset(double value) {
        bitField0_ |= 0x00020000;
        intasset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double intasset = 18;</code>
       *
       * <pre>
       * 无形资产 C17   
       * </pre>
       */
      public Builder clearIntasset() {
        bitField0_ = (bitField0_ & ~0x00020000);
        intasset_ = 0D;
        onChanged();
        return this;
      }

      private double floatdebet_ ;
      /**
       * <code>optional double floatdebet = 19;</code>
       *
       * <pre>
       * 流动负债 C18
       * </pre>
       */
      public boolean hasFloatdebet() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional double floatdebet = 19;</code>
       *
       * <pre>
       * 流动负债 C18
       * </pre>
       */
      public double getFloatdebet() {
        return floatdebet_;
      }
      /**
       * <code>optional double floatdebet = 19;</code>
       *
       * <pre>
       * 流动负债 C18
       * </pre>
       */
      public Builder setFloatdebet(double value) {
        bitField0_ |= 0x00040000;
        floatdebet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double floatdebet = 19;</code>
       *
       * <pre>
       * 流动负债 C18
       * </pre>
       */
      public Builder clearFloatdebet() {
        bitField0_ = (bitField0_ & ~0x00040000);
        floatdebet_ = 0D;
        onChanged();
        return this;
      }

      private double longdebet_ ;
      /**
       * <code>optional double longdebet = 20;</code>
       *
       * <pre>
       * 长期负债 C19
       * </pre>
       */
      public boolean hasLongdebet() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional double longdebet = 20;</code>
       *
       * <pre>
       * 长期负债 C19
       * </pre>
       */
      public double getLongdebet() {
        return longdebet_;
      }
      /**
       * <code>optional double longdebet = 20;</code>
       *
       * <pre>
       * 长期负债 C19
       * </pre>
       */
      public Builder setLongdebet(double value) {
        bitField0_ |= 0x00080000;
        longdebet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double longdebet = 20;</code>
       *
       * <pre>
       * 长期负债 C19
       * </pre>
       */
      public Builder clearLongdebet() {
        bitField0_ = (bitField0_ & ~0x00080000);
        longdebet_ = 0D;
        onChanged();
        return this;
      }

      private double alldebet_ ;
      /**
       * <code>optional double alldebet = 21;</code>
       *
       * <pre>
       * 总负债 C20
       * </pre>
       */
      public boolean hasAlldebet() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional double alldebet = 21;</code>
       *
       * <pre>
       * 总负债 C20
       * </pre>
       */
      public double getAlldebet() {
        return alldebet_;
      }
      /**
       * <code>optional double alldebet = 21;</code>
       *
       * <pre>
       * 总负债 C20
       * </pre>
       */
      public Builder setAlldebet(double value) {
        bitField0_ |= 0x00100000;
        alldebet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double alldebet = 21;</code>
       *
       * <pre>
       * 总负债 C20
       * </pre>
       */
      public Builder clearAlldebet() {
        bitField0_ = (bitField0_ & ~0x00100000);
        alldebet_ = 0D;
        onChanged();
        return this;
      }

      private double hoderequity_ ;
      /**
       * <code>optional double hoderequity = 22;</code>
       *
       * <pre>
       * 股东权益 C21
       * </pre>
       */
      public boolean hasHoderequity() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional double hoderequity = 22;</code>
       *
       * <pre>
       * 股东权益 C21
       * </pre>
       */
      public double getHoderequity() {
        return hoderequity_;
      }
      /**
       * <code>optional double hoderequity = 22;</code>
       *
       * <pre>
       * 股东权益 C21
       * </pre>
       */
      public Builder setHoderequity(double value) {
        bitField0_ |= 0x00200000;
        hoderequity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double hoderequity = 22;</code>
       *
       * <pre>
       * 股东权益 C21
       * </pre>
       */
      public Builder clearHoderequity() {
        bitField0_ = (bitField0_ & ~0x00200000);
        hoderequity_ = 0D;
        onChanged();
        return this;
      }

      private double capitalfund_ ;
      /**
       * <code>optional double capitalfund = 23;</code>
       *
       * <pre>
       * 资本公积金 C22
       * </pre>
       */
      public boolean hasCapitalfund() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional double capitalfund = 23;</code>
       *
       * <pre>
       * 资本公积金 C22
       * </pre>
       */
      public double getCapitalfund() {
        return capitalfund_;
      }
      /**
       * <code>optional double capitalfund = 23;</code>
       *
       * <pre>
       * 资本公积金 C22
       * </pre>
       */
      public Builder setCapitalfund(double value) {
        bitField0_ |= 0x00400000;
        capitalfund_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double capitalfund = 23;</code>
       *
       * <pre>
       * 资本公积金 C22
       * </pre>
       */
      public Builder clearCapitalfund() {
        bitField0_ = (bitField0_ & ~0x00400000);
        capitalfund_ = 0D;
        onChanged();
        return this;
      }

      private double cashfloat_ ;
      /**
       * <code>optional double cashfloat = 24;</code>
       *
       * <pre>
       * 经营现金流量 C23
       * </pre>
       */
      public boolean hasCashfloat() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional double cashfloat = 24;</code>
       *
       * <pre>
       * 经营现金流量 C23
       * </pre>
       */
      public double getCashfloat() {
        return cashfloat_;
      }
      /**
       * <code>optional double cashfloat = 24;</code>
       *
       * <pre>
       * 经营现金流量 C23
       * </pre>
       */
      public Builder setCashfloat(double value) {
        bitField0_ |= 0x00800000;
        cashfloat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cashfloat = 24;</code>
       *
       * <pre>
       * 经营现金流量 C23
       * </pre>
       */
      public Builder clearCashfloat() {
        bitField0_ = (bitField0_ & ~0x00800000);
        cashfloat_ = 0D;
        onChanged();
        return this;
      }

      private double investfloat_ ;
      /**
       * <code>optional double investfloat = 25;</code>
       *
       * <pre>
       * 投资现金流量 C24
       * </pre>
       */
      public boolean hasInvestfloat() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional double investfloat = 25;</code>
       *
       * <pre>
       * 投资现金流量 C24
       * </pre>
       */
      public double getInvestfloat() {
        return investfloat_;
      }
      /**
       * <code>optional double investfloat = 25;</code>
       *
       * <pre>
       * 投资现金流量 C24
       * </pre>
       */
      public Builder setInvestfloat(double value) {
        bitField0_ |= 0x01000000;
        investfloat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double investfloat = 25;</code>
       *
       * <pre>
       * 投资现金流量 C24
       * </pre>
       */
      public Builder clearInvestfloat() {
        bitField0_ = (bitField0_ & ~0x01000000);
        investfloat_ = 0D;
        onChanged();
        return this;
      }

      private double raisefloat_ ;
      /**
       * <code>optional double raisefloat = 26;</code>
       *
       * <pre>
       * 筹资现金流量 C25
       * </pre>
       */
      public boolean hasRaisefloat() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional double raisefloat = 26;</code>
       *
       * <pre>
       * 筹资现金流量 C25
       * </pre>
       */
      public double getRaisefloat() {
        return raisefloat_;
      }
      /**
       * <code>optional double raisefloat = 26;</code>
       *
       * <pre>
       * 筹资现金流量 C25
       * </pre>
       */
      public Builder setRaisefloat(double value) {
        bitField0_ |= 0x02000000;
        raisefloat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double raisefloat = 26;</code>
       *
       * <pre>
       * 筹资现金流量 C25
       * </pre>
       */
      public Builder clearRaisefloat() {
        bitField0_ = (bitField0_ & ~0x02000000);
        raisefloat_ = 0D;
        onChanged();
        return this;
      }

      private double cashinc_ ;
      /**
       * <code>optional double cashinc = 27;</code>
       *
       * <pre>
       * 现金增加额 C26 
       * </pre>
       */
      public boolean hasCashinc() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional double cashinc = 27;</code>
       *
       * <pre>
       * 现金增加额 C26 
       * </pre>
       */
      public double getCashinc() {
        return cashinc_;
      }
      /**
       * <code>optional double cashinc = 27;</code>
       *
       * <pre>
       * 现金增加额 C26 
       * </pre>
       */
      public Builder setCashinc(double value) {
        bitField0_ |= 0x04000000;
        cashinc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cashinc = 27;</code>
       *
       * <pre>
       * 现金增加额 C26 
       * </pre>
       */
      public Builder clearCashinc() {
        bitField0_ = (bitField0_ & ~0x04000000);
        cashinc_ = 0D;
        onChanged();
        return this;
      }

      private double mainincome_ ;
      /**
       * <code>optional double mainincome = 28;</code>
       *
       * <pre>
       * 主营收入 C27 
       * </pre>
       */
      public boolean hasMainincome() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional double mainincome = 28;</code>
       *
       * <pre>
       * 主营收入 C27 
       * </pre>
       */
      public double getMainincome() {
        return mainincome_;
      }
      /**
       * <code>optional double mainincome = 28;</code>
       *
       * <pre>
       * 主营收入 C27 
       * </pre>
       */
      public Builder setMainincome(double value) {
        bitField0_ |= 0x08000000;
        mainincome_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double mainincome = 28;</code>
       *
       * <pre>
       * 主营收入 C27 
       * </pre>
       */
      public Builder clearMainincome() {
        bitField0_ = (bitField0_ & ~0x08000000);
        mainincome_ = 0D;
        onChanged();
        return this;
      }

      private double mainprofit_ ;
      /**
       * <code>optional double mainprofit = 29;</code>
       *
       * <pre>
       * 主营利润 C28
       * </pre>
       */
      public boolean hasMainprofit() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional double mainprofit = 29;</code>
       *
       * <pre>
       * 主营利润 C28
       * </pre>
       */
      public double getMainprofit() {
        return mainprofit_;
      }
      /**
       * <code>optional double mainprofit = 29;</code>
       *
       * <pre>
       * 主营利润 C28
       * </pre>
       */
      public Builder setMainprofit(double value) {
        bitField0_ |= 0x10000000;
        mainprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double mainprofit = 29;</code>
       *
       * <pre>
       * 主营利润 C28
       * </pre>
       */
      public Builder clearMainprofit() {
        bitField0_ = (bitField0_ & ~0x10000000);
        mainprofit_ = 0D;
        onChanged();
        return this;
      }

      private double tradeprofit_ ;
      /**
       * <code>optional double tradeprofit = 30;</code>
       *
       * <pre>
       * 营业利润 C29
       * </pre>
       */
      public boolean hasTradeprofit() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional double tradeprofit = 30;</code>
       *
       * <pre>
       * 营业利润 C29
       * </pre>
       */
      public double getTradeprofit() {
        return tradeprofit_;
      }
      /**
       * <code>optional double tradeprofit = 30;</code>
       *
       * <pre>
       * 营业利润 C29
       * </pre>
       */
      public Builder setTradeprofit(double value) {
        bitField0_ |= 0x20000000;
        tradeprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double tradeprofit = 30;</code>
       *
       * <pre>
       * 营业利润 C29
       * </pre>
       */
      public Builder clearTradeprofit() {
        bitField0_ = (bitField0_ & ~0x20000000);
        tradeprofit_ = 0D;
        onChanged();
        return this;
      }

      private double investprofit_ ;
      /**
       * <code>optional double investprofit = 31;</code>
       *
       * <pre>
       * 投资收益 C30
       * </pre>
       */
      public boolean hasInvestprofit() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional double investprofit = 31;</code>
       *
       * <pre>
       * 投资收益 C30
       * </pre>
       */
      public double getInvestprofit() {
        return investprofit_;
      }
      /**
       * <code>optional double investprofit = 31;</code>
       *
       * <pre>
       * 投资收益 C30
       * </pre>
       */
      public Builder setInvestprofit(double value) {
        bitField0_ |= 0x40000000;
        investprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double investprofit = 31;</code>
       *
       * <pre>
       * 投资收益 C30
       * </pre>
       */
      public Builder clearInvestprofit() {
        bitField0_ = (bitField0_ & ~0x40000000);
        investprofit_ = 0D;
        onChanged();
        return this;
      }

      private double otherbalance_ ;
      /**
       * <code>optional double otherbalance = 32;</code>
       *
       * <pre>
       * 营业外收支 C31
       * </pre>
       */
      public boolean hasOtherbalance() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional double otherbalance = 32;</code>
       *
       * <pre>
       * 营业外收支 C31
       * </pre>
       */
      public double getOtherbalance() {
        return otherbalance_;
      }
      /**
       * <code>optional double otherbalance = 32;</code>
       *
       * <pre>
       * 营业外收支 C31
       * </pre>
       */
      public Builder setOtherbalance(double value) {
        bitField0_ |= 0x80000000;
        otherbalance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double otherbalance = 32;</code>
       *
       * <pre>
       * 营业外收支 C31
       * </pre>
       */
      public Builder clearOtherbalance() {
        bitField0_ = (bitField0_ & ~0x80000000);
        otherbalance_ = 0D;
        onChanged();
        return this;
      }

      private double allprofit_ ;
      /**
       * <code>optional double allprofit = 33;</code>
       *
       * <pre>
       * 利润总额 C32
       * </pre>
       */
      public boolean hasAllprofit() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double allprofit = 33;</code>
       *
       * <pre>
       * 利润总额 C32
       * </pre>
       */
      public double getAllprofit() {
        return allprofit_;
      }
      /**
       * <code>optional double allprofit = 33;</code>
       *
       * <pre>
       * 利润总额 C32
       * </pre>
       */
      public Builder setAllprofit(double value) {
        bitField1_ |= 0x00000001;
        allprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double allprofit = 33;</code>
       *
       * <pre>
       * 利润总额 C32
       * </pre>
       */
      public Builder clearAllprofit() {
        bitField1_ = (bitField1_ & ~0x00000001);
        allprofit_ = 0D;
        onChanged();
        return this;
      }

      private double netprofit_ ;
      /**
       * <code>optional double netprofit = 34;</code>
       *
       * <pre>
       * 净利润 C33
       * </pre>
       */
      public boolean hasNetprofit() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double netprofit = 34;</code>
       *
       * <pre>
       * 净利润 C33
       * </pre>
       */
      public double getNetprofit() {
        return netprofit_;
      }
      /**
       * <code>optional double netprofit = 34;</code>
       *
       * <pre>
       * 净利润 C33
       * </pre>
       */
      public Builder setNetprofit(double value) {
        bitField1_ |= 0x00000002;
        netprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double netprofit = 34;</code>
       *
       * <pre>
       * 净利润 C33
       * </pre>
       */
      public Builder clearNetprofit() {
        bitField1_ = (bitField1_ & ~0x00000002);
        netprofit_ = 0D;
        onChanged();
        return this;
      }

      private double unapproprofit_ ;
      /**
       * <code>optional double unapproprofit = 35;</code>
       *
       * <pre>
       * 未分配利润 C34
       * </pre>
       */
      public boolean hasUnapproprofit() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double unapproprofit = 35;</code>
       *
       * <pre>
       * 未分配利润 C34
       * </pre>
       */
      public double getUnapproprofit() {
        return unapproprofit_;
      }
      /**
       * <code>optional double unapproprofit = 35;</code>
       *
       * <pre>
       * 未分配利润 C34
       * </pre>
       */
      public Builder setUnapproprofit(double value) {
        bitField1_ |= 0x00000004;
        unapproprofit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double unapproprofit = 35;</code>
       *
       * <pre>
       * 未分配利润 C34
       * </pre>
       */
      public Builder clearUnapproprofit() {
        bitField1_ = (bitField1_ & ~0x00000004);
        unapproprofit_ = 0D;
        onChanged();
        return this;
      }

      private double totalshare_ ;
      /**
       * <code>optional double totalshare = 36;</code>
       *
       * <pre>
       * 总股本 C1
       * </pre>
       */
      public boolean hasTotalshare() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double totalshare = 36;</code>
       *
       * <pre>
       * 总股本 C1
       * </pre>
       */
      public double getTotalshare() {
        return totalshare_;
      }
      /**
       * <code>optional double totalshare = 36;</code>
       *
       * <pre>
       * 总股本 C1
       * </pre>
       */
      public Builder setTotalshare(double value) {
        bitField1_ |= 0x00000008;
        totalshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double totalshare = 36;</code>
       *
       * <pre>
       * 总股本 C1
       * </pre>
       */
      public Builder clearTotalshare() {
        bitField1_ = (bitField1_ & ~0x00000008);
        totalshare_ = 0D;
        onChanged();
        return this;
      }

      private double norestrictshare_ ;
      /**
       * <code>optional double norestrictshare = 37;</code>
       *
       * <pre>
       * 无限售股份合计 C36
       * </pre>
       */
      public boolean hasNorestrictshare() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double norestrictshare = 37;</code>
       *
       * <pre>
       * 无限售股份合计 C36
       * </pre>
       */
      public double getNorestrictshare() {
        return norestrictshare_;
      }
      /**
       * <code>optional double norestrictshare = 37;</code>
       *
       * <pre>
       * 无限售股份合计 C36
       * </pre>
       */
      public Builder setNorestrictshare(double value) {
        bitField1_ |= 0x00000010;
        norestrictshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double norestrictshare = 37;</code>
       *
       * <pre>
       * 无限售股份合计 C36
       * </pre>
       */
      public Builder clearNorestrictshare() {
        bitField1_ = (bitField1_ & ~0x00000010);
        norestrictshare_ = 0D;
        onChanged();
        return this;
      }

      private double ashare_ ;
      /**
       * <code>optional double ashare = 38;</code>
       *
       * <pre>
       * A股 C37
       * </pre>
       */
      public boolean hasAshare() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double ashare = 38;</code>
       *
       * <pre>
       * A股 C37
       * </pre>
       */
      public double getAshare() {
        return ashare_;
      }
      /**
       * <code>optional double ashare = 38;</code>
       *
       * <pre>
       * A股 C37
       * </pre>
       */
      public Builder setAshare(double value) {
        bitField1_ |= 0x00000020;
        ashare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ashare = 38;</code>
       *
       * <pre>
       * A股 C37
       * </pre>
       */
      public Builder clearAshare() {
        bitField1_ = (bitField1_ & ~0x00000020);
        ashare_ = 0D;
        onChanged();
        return this;
      }

      private double bshare_ ;
      /**
       * <code>optional double bshare = 39;</code>
       *
       * <pre>
       * B股 C38
       * </pre>
       */
      public boolean hasBshare() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double bshare = 39;</code>
       *
       * <pre>
       * B股 C38
       * </pre>
       */
      public double getBshare() {
        return bshare_;
      }
      /**
       * <code>optional double bshare = 39;</code>
       *
       * <pre>
       * B股 C38
       * </pre>
       */
      public Builder setBshare(double value) {
        bitField1_ |= 0x00000040;
        bshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double bshare = 39;</code>
       *
       * <pre>
       * B股 C38
       * </pre>
       */
      public Builder clearBshare() {
        bitField1_ = (bitField1_ & ~0x00000040);
        bshare_ = 0D;
        onChanged();
        return this;
      }

      private double foreignshare_ ;
      /**
       * <code>optional double foreignshare = 40;</code>
       *
       * <pre>
       * 境外上市外资股 C39
       * </pre>
       */
      public boolean hasForeignshare() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double foreignshare = 40;</code>
       *
       * <pre>
       * 境外上市外资股 C39
       * </pre>
       */
      public double getForeignshare() {
        return foreignshare_;
      }
      /**
       * <code>optional double foreignshare = 40;</code>
       *
       * <pre>
       * 境外上市外资股 C39
       * </pre>
       */
      public Builder setForeignshare(double value) {
        bitField1_ |= 0x00000080;
        foreignshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double foreignshare = 40;</code>
       *
       * <pre>
       * 境外上市外资股 C39
       * </pre>
       */
      public Builder clearForeignshare() {
        bitField1_ = (bitField1_ & ~0x00000080);
        foreignshare_ = 0D;
        onChanged();
        return this;
      }

      private double otherfloatshare_ ;
      /**
       * <code>optional double otherfloatshare = 41;</code>
       *
       * <pre>
       * 其他流通股份 C40
       * </pre>
       */
      public boolean hasOtherfloatshare() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double otherfloatshare = 41;</code>
       *
       * <pre>
       * 其他流通股份 C40
       * </pre>
       */
      public double getOtherfloatshare() {
        return otherfloatshare_;
      }
      /**
       * <code>optional double otherfloatshare = 41;</code>
       *
       * <pre>
       * 其他流通股份 C40
       * </pre>
       */
      public Builder setOtherfloatshare(double value) {
        bitField1_ |= 0x00000100;
        otherfloatshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double otherfloatshare = 41;</code>
       *
       * <pre>
       * 其他流通股份 C40
       * </pre>
       */
      public Builder clearOtherfloatshare() {
        bitField1_ = (bitField1_ & ~0x00000100);
        otherfloatshare_ = 0D;
        onChanged();
        return this;
      }

      private double restrictshare_ ;
      /**
       * <code>optional double restrictshare = 42;</code>
       *
       * <pre>
       * 限售股份合计 C41
       * </pre>
       */
      public boolean hasRestrictshare() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double restrictshare = 42;</code>
       *
       * <pre>
       * 限售股份合计 C41
       * </pre>
       */
      public double getRestrictshare() {
        return restrictshare_;
      }
      /**
       * <code>optional double restrictshare = 42;</code>
       *
       * <pre>
       * 限售股份合计 C41
       * </pre>
       */
      public Builder setRestrictshare(double value) {
        bitField1_ |= 0x00000200;
        restrictshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double restrictshare = 42;</code>
       *
       * <pre>
       * 限售股份合计 C41
       * </pre>
       */
      public Builder clearRestrictshare() {
        bitField1_ = (bitField1_ & ~0x00000200);
        restrictshare_ = 0D;
        onChanged();
        return this;
      }

      private double nationshare_ ;
      /**
       * <code>optional double nationshare = 43;</code>
       *
       * <pre>
       * 国家持股 C42
       * </pre>
       */
      public boolean hasNationshare() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional double nationshare = 43;</code>
       *
       * <pre>
       * 国家持股 C42
       * </pre>
       */
      public double getNationshare() {
        return nationshare_;
      }
      /**
       * <code>optional double nationshare = 43;</code>
       *
       * <pre>
       * 国家持股 C42
       * </pre>
       */
      public Builder setNationshare(double value) {
        bitField1_ |= 0x00000400;
        nationshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double nationshare = 43;</code>
       *
       * <pre>
       * 国家持股 C42
       * </pre>
       */
      public Builder clearNationshare() {
        bitField1_ = (bitField1_ & ~0x00000400);
        nationshare_ = 0D;
        onChanged();
        return this;
      }

      private double natcorpshare_ ;
      /**
       * <code>optional double natcorpshare = 44;</code>
       *
       * <pre>
       * 国有法人持股 C43 
       * </pre>
       */
      public boolean hasNatcorpshare() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional double natcorpshare = 44;</code>
       *
       * <pre>
       * 国有法人持股 C43 
       * </pre>
       */
      public double getNatcorpshare() {
        return natcorpshare_;
      }
      /**
       * <code>optional double natcorpshare = 44;</code>
       *
       * <pre>
       * 国有法人持股 C43 
       * </pre>
       */
      public Builder setNatcorpshare(double value) {
        bitField1_ |= 0x00000800;
        natcorpshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double natcorpshare = 44;</code>
       *
       * <pre>
       * 国有法人持股 C43 
       * </pre>
       */
      public Builder clearNatcorpshare() {
        bitField1_ = (bitField1_ & ~0x00000800);
        natcorpshare_ = 0D;
        onChanged();
        return this;
      }

      private double domestcorpshare_ ;
      /**
       * <code>optional double domestcorpshare = 45;</code>
       *
       * <pre>
       * 境内法人持股 C44
       * </pre>
       */
      public boolean hasDomestcorpshare() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional double domestcorpshare = 45;</code>
       *
       * <pre>
       * 境内法人持股 C44
       * </pre>
       */
      public double getDomestcorpshare() {
        return domestcorpshare_;
      }
      /**
       * <code>optional double domestcorpshare = 45;</code>
       *
       * <pre>
       * 境内法人持股 C44
       * </pre>
       */
      public Builder setDomestcorpshare(double value) {
        bitField1_ |= 0x00001000;
        domestcorpshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double domestcorpshare = 45;</code>
       *
       * <pre>
       * 境内法人持股 C44
       * </pre>
       */
      public Builder clearDomestcorpshare() {
        bitField1_ = (bitField1_ & ~0x00001000);
        domestcorpshare_ = 0D;
        onChanged();
        return this;
      }

      private double domestindshare_ ;
      /**
       * <code>optional double domestindshare = 46;</code>
       *
       * <pre>
       * 境内自然人持股 C45
       * </pre>
       */
      public boolean hasDomestindshare() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional double domestindshare = 46;</code>
       *
       * <pre>
       * 境内自然人持股 C45
       * </pre>
       */
      public double getDomestindshare() {
        return domestindshare_;
      }
      /**
       * <code>optional double domestindshare = 46;</code>
       *
       * <pre>
       * 境内自然人持股 C45
       * </pre>
       */
      public Builder setDomestindshare(double value) {
        bitField1_ |= 0x00002000;
        domestindshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double domestindshare = 46;</code>
       *
       * <pre>
       * 境内自然人持股 C45
       * </pre>
       */
      public Builder clearDomestindshare() {
        bitField1_ = (bitField1_ & ~0x00002000);
        domestindshare_ = 0D;
        onChanged();
        return this;
      }

      private double otherlaunchshare_ ;
      /**
       * <code>optional double otherlaunchshare = 47;</code>
       *
       * <pre>
       * 其他发起人股份 C46
       * </pre>
       */
      public boolean hasOtherlaunchshare() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional double otherlaunchshare = 47;</code>
       *
       * <pre>
       * 其他发起人股份 C46
       * </pre>
       */
      public double getOtherlaunchshare() {
        return otherlaunchshare_;
      }
      /**
       * <code>optional double otherlaunchshare = 47;</code>
       *
       * <pre>
       * 其他发起人股份 C46
       * </pre>
       */
      public Builder setOtherlaunchshare(double value) {
        bitField1_ |= 0x00004000;
        otherlaunchshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double otherlaunchshare = 47;</code>
       *
       * <pre>
       * 其他发起人股份 C46
       * </pre>
       */
      public Builder clearOtherlaunchshare() {
        bitField1_ = (bitField1_ & ~0x00004000);
        otherlaunchshare_ = 0D;
        onChanged();
        return this;
      }

      private double raisecorpshare_ ;
      /**
       * <code>optional double raisecorpshare = 48;</code>
       *
       * <pre>
       * 募集法人股份 C47
       * </pre>
       */
      public boolean hasRaisecorpshare() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional double raisecorpshare = 48;</code>
       *
       * <pre>
       * 募集法人股份 C47
       * </pre>
       */
      public double getRaisecorpshare() {
        return raisecorpshare_;
      }
      /**
       * <code>optional double raisecorpshare = 48;</code>
       *
       * <pre>
       * 募集法人股份 C47
       * </pre>
       */
      public Builder setRaisecorpshare(double value) {
        bitField1_ |= 0x00008000;
        raisecorpshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double raisecorpshare = 48;</code>
       *
       * <pre>
       * 募集法人股份 C47
       * </pre>
       */
      public Builder clearRaisecorpshare() {
        bitField1_ = (bitField1_ & ~0x00008000);
        raisecorpshare_ = 0D;
        onChanged();
        return this;
      }

      private double foreigncorpshare_ ;
      /**
       * <code>optional double foreigncorpshare = 49;</code>
       *
       * <pre>
       * 境外法人持股 C48
       * </pre>
       */
      public boolean hasForeigncorpshare() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional double foreigncorpshare = 49;</code>
       *
       * <pre>
       * 境外法人持股 C48
       * </pre>
       */
      public double getForeigncorpshare() {
        return foreigncorpshare_;
      }
      /**
       * <code>optional double foreigncorpshare = 49;</code>
       *
       * <pre>
       * 境外法人持股 C48
       * </pre>
       */
      public Builder setForeigncorpshare(double value) {
        bitField1_ |= 0x00010000;
        foreigncorpshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double foreigncorpshare = 49;</code>
       *
       * <pre>
       * 境外法人持股 C48
       * </pre>
       */
      public Builder clearForeigncorpshare() {
        bitField1_ = (bitField1_ & ~0x00010000);
        foreigncorpshare_ = 0D;
        onChanged();
        return this;
      }

      private double foreingIndshare_ ;
      /**
       * <code>optional double foreingIndshare = 50;</code>
       *
       * <pre>
       * 境外自然人持股 C49
       * </pre>
       */
      public boolean hasForeingIndshare() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional double foreingIndshare = 50;</code>
       *
       * <pre>
       * 境外自然人持股 C49
       * </pre>
       */
      public double getForeingIndshare() {
        return foreingIndshare_;
      }
      /**
       * <code>optional double foreingIndshare = 50;</code>
       *
       * <pre>
       * 境外自然人持股 C49
       * </pre>
       */
      public Builder setForeingIndshare(double value) {
        bitField1_ |= 0x00020000;
        foreingIndshare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double foreingIndshare = 50;</code>
       *
       * <pre>
       * 境外自然人持股 C49
       * </pre>
       */
      public Builder clearForeingIndshare() {
        bitField1_ = (bitField1_ & ~0x00020000);
        foreingIndshare_ = 0D;
        onChanged();
        return this;
      }

      private double preforothershare_ ;
      /**
       * <code>optional double preforothershare = 51;</code>
       *
       * <pre>
       * 优先股或其他 C50	
       * </pre>
       */
      public boolean hasPreforothershare() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional double preforothershare = 51;</code>
       *
       * <pre>
       * 优先股或其他 C50	
       * </pre>
       */
      public double getPreforothershare() {
        return preforothershare_;
      }
      /**
       * <code>optional double preforothershare = 51;</code>
       *
       * <pre>
       * 优先股或其他 C50	
       * </pre>
       */
      public Builder setPreforothershare(double value) {
        bitField1_ |= 0x00040000;
        preforothershare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double preforothershare = 51;</code>
       *
       * <pre>
       * 优先股或其他 C50	
       * </pre>
       */
      public Builder clearPreforothershare() {
        bitField1_ = (bitField1_ & ~0x00040000);
        preforothershare_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzhyun.BasicFinanceData)
    }

    static {
      defaultInstance = new BasicFinanceData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzhyun.BasicFinanceData)
  }

  public interface DividDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dzhyun.DividData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    boolean hasObj();
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    java.lang.String getObj();
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    com.google.protobuf.ByteString
        getObjBytes();

    /**
     * <code>required string chuQuanRiQi = 2;</code>
     *
     * <pre>
     * 除权日期     C7
     * </pre>
     */
    boolean hasChuQuanRiQi();
    /**
     * <code>required string chuQuanRiQi = 2;</code>
     *
     * <pre>
     * 除权日期     C7
     * </pre>
     */
    java.lang.String getChuQuanRiQi();
    /**
     * <code>required string chuQuanRiQi = 2;</code>
     *
     * <pre>
     * 除权日期     C7
     * </pre>
     */
    com.google.protobuf.ByteString
        getChuQuanRiQiBytes();

    /**
     * <code>required string guQuanDenJiRi = 3;</code>
     *
     * <pre>
     * 股权登记日     C9
     * </pre>
     */
    boolean hasGuQuanDenJiRi();
    /**
     * <code>required string guQuanDenJiRi = 3;</code>
     *
     * <pre>
     * 股权登记日     C9
     * </pre>
     */
    java.lang.String getGuQuanDenJiRi();
    /**
     * <code>required string guQuanDenJiRi = 3;</code>
     *
     * <pre>
     * 股权登记日     C9
     * </pre>
     */
    com.google.protobuf.ByteString
        getGuQuanDenJiRiBytes();

    /**
     * <code>optional double songGuShu = 4;</code>
     *
     * <pre>
     * (每10股)送股数   C10
     * </pre>
     */
    boolean hasSongGuShu();
    /**
     * <code>optional double songGuShu = 4;</code>
     *
     * <pre>
     * (每10股)送股数   C10
     * </pre>
     */
    double getSongGuShu();

    /**
     * <code>optional double zhuanZengGuShu = 5;</code>
     *
     * <pre>
     * (每10股)转增股数    C11
     * </pre>
     */
    boolean hasZhuanZengGuShu();
    /**
     * <code>optional double zhuanZengGuShu = 5;</code>
     *
     * <pre>
     * (每10股)转增股数    C11
     * </pre>
     */
    double getZhuanZengGuShu();

    /**
     * <code>optional double paiXiShu = 6;</code>
     *
     * <pre>
     * (每10股)派息数(税前)   C12
     * </pre>
     */
    boolean hasPaiXiShu();
    /**
     * <code>optional double paiXiShu = 6;</code>
     *
     * <pre>
     * (每10股)派息数(税前)   C12
     * </pre>
     */
    double getPaiXiShu();

    /**
     * <code>optional double peiGuShu = 7;</code>
     *
     * <pre>
     * (每10股)配股数    C14
     * </pre>
     */
    boolean hasPeiGuShu();
    /**
     * <code>optional double peiGuShu = 7;</code>
     *
     * <pre>
     * (每10股)配股数    C14
     * </pre>
     */
    double getPeiGuShu();

    /**
     * <code>optional double peiGuJia = 8;</code>
     *
     * <pre>
     * 配股价   C15
     * </pre>
     */
    boolean hasPeiGuJia();
    /**
     * <code>optional double peiGuJia = 8;</code>
     *
     * <pre>
     * 配股价   C15
     * </pre>
     */
    double getPeiGuJia();
  }
  /**
   * Protobuf type {@code dzhyun.DividData}
   *
   * <pre>
   *专业财务数据--除权
   * </pre>
   */
  public static final class DividData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dzhyun.DividData)
      DividDataOrBuilder {
    // Use DividData.newBuilder() to construct.
    private DividData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DividData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DividData defaultInstance;
    public static DividData getDefaultInstance() {
      return defaultInstance;
    }

    public DividData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DividData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              obj_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              chuQuanRiQi_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              guQuanDenJiRi_ = bs;
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              songGuShu_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              zhuanZengGuShu_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              paiXiShu_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              peiGuShu_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              peiGuJia_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_DividData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_DividData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dzhyun.proto.CldCaiWuShuJu.DividData.class, com.dzhyun.proto.CldCaiWuShuJu.DividData.Builder.class);
    }

    public static com.google.protobuf.Parser<DividData> PARSER =
        new com.google.protobuf.AbstractParser<DividData>() {
      public DividData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DividData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DividData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int OBJ_FIELD_NUMBER = 1;
    private java.lang.Object obj_;
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    public boolean hasObj() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    public java.lang.String getObj() {
      java.lang.Object ref = obj_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          obj_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getObjBytes() {
      java.lang.Object ref = obj_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        obj_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHUQUANRIQI_FIELD_NUMBER = 2;
    private java.lang.Object chuQuanRiQi_;
    /**
     * <code>required string chuQuanRiQi = 2;</code>
     *
     * <pre>
     * 除权日期     C7
     * </pre>
     */
    public boolean hasChuQuanRiQi() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string chuQuanRiQi = 2;</code>
     *
     * <pre>
     * 除权日期     C7
     * </pre>
     */
    public java.lang.String getChuQuanRiQi() {
      java.lang.Object ref = chuQuanRiQi_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          chuQuanRiQi_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string chuQuanRiQi = 2;</code>
     *
     * <pre>
     * 除权日期     C7
     * </pre>
     */
    public com.google.protobuf.ByteString
        getChuQuanRiQiBytes() {
      java.lang.Object ref = chuQuanRiQi_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        chuQuanRiQi_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GUQUANDENJIRI_FIELD_NUMBER = 3;
    private java.lang.Object guQuanDenJiRi_;
    /**
     * <code>required string guQuanDenJiRi = 3;</code>
     *
     * <pre>
     * 股权登记日     C9
     * </pre>
     */
    public boolean hasGuQuanDenJiRi() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string guQuanDenJiRi = 3;</code>
     *
     * <pre>
     * 股权登记日     C9
     * </pre>
     */
    public java.lang.String getGuQuanDenJiRi() {
      java.lang.Object ref = guQuanDenJiRi_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          guQuanDenJiRi_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string guQuanDenJiRi = 3;</code>
     *
     * <pre>
     * 股权登记日     C9
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGuQuanDenJiRiBytes() {
      java.lang.Object ref = guQuanDenJiRi_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        guQuanDenJiRi_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SONGGUSHU_FIELD_NUMBER = 4;
    private double songGuShu_;
    /**
     * <code>optional double songGuShu = 4;</code>
     *
     * <pre>
     * (每10股)送股数   C10
     * </pre>
     */
    public boolean hasSongGuShu() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double songGuShu = 4;</code>
     *
     * <pre>
     * (每10股)送股数   C10
     * </pre>
     */
    public double getSongGuShu() {
      return songGuShu_;
    }

    public static final int ZHUANZENGGUSHU_FIELD_NUMBER = 5;
    private double zhuanZengGuShu_;
    /**
     * <code>optional double zhuanZengGuShu = 5;</code>
     *
     * <pre>
     * (每10股)转增股数    C11
     * </pre>
     */
    public boolean hasZhuanZengGuShu() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double zhuanZengGuShu = 5;</code>
     *
     * <pre>
     * (每10股)转增股数    C11
     * </pre>
     */
    public double getZhuanZengGuShu() {
      return zhuanZengGuShu_;
    }

    public static final int PAIXISHU_FIELD_NUMBER = 6;
    private double paiXiShu_;
    /**
     * <code>optional double paiXiShu = 6;</code>
     *
     * <pre>
     * (每10股)派息数(税前)   C12
     * </pre>
     */
    public boolean hasPaiXiShu() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double paiXiShu = 6;</code>
     *
     * <pre>
     * (每10股)派息数(税前)   C12
     * </pre>
     */
    public double getPaiXiShu() {
      return paiXiShu_;
    }

    public static final int PEIGUSHU_FIELD_NUMBER = 7;
    private double peiGuShu_;
    /**
     * <code>optional double peiGuShu = 7;</code>
     *
     * <pre>
     * (每10股)配股数    C14
     * </pre>
     */
    public boolean hasPeiGuShu() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double peiGuShu = 7;</code>
     *
     * <pre>
     * (每10股)配股数    C14
     * </pre>
     */
    public double getPeiGuShu() {
      return peiGuShu_;
    }

    public static final int PEIGUJIA_FIELD_NUMBER = 8;
    private double peiGuJia_;
    /**
     * <code>optional double peiGuJia = 8;</code>
     *
     * <pre>
     * 配股价   C15
     * </pre>
     */
    public boolean hasPeiGuJia() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double peiGuJia = 8;</code>
     *
     * <pre>
     * 配股价   C15
     * </pre>
     */
    public double getPeiGuJia() {
      return peiGuJia_;
    }

    private void initFields() {
      obj_ = "";
      chuQuanRiQi_ = "";
      guQuanDenJiRi_ = "";
      songGuShu_ = 0D;
      zhuanZengGuShu_ = 0D;
      paiXiShu_ = 0D;
      peiGuShu_ = 0D;
      peiGuJia_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasObj()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasChuQuanRiQi()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGuQuanDenJiRi()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getObjBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getChuQuanRiQiBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getGuQuanDenJiRiBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, songGuShu_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, zhuanZengGuShu_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, paiXiShu_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, peiGuShu_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, peiGuJia_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getObjBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getChuQuanRiQiBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getGuQuanDenJiRiBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, songGuShu_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, zhuanZengGuShu_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, paiXiShu_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, peiGuShu_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, peiGuJia_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.CldCaiWuShuJu.DividData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dzhyun.proto.CldCaiWuShuJu.DividData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzhyun.DividData}
     *
     * <pre>
     *专业财务数据--除权
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dzhyun.DividData)
        com.dzhyun.proto.CldCaiWuShuJu.DividDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_DividData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_DividData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dzhyun.proto.CldCaiWuShuJu.DividData.class, com.dzhyun.proto.CldCaiWuShuJu.DividData.Builder.class);
      }

      // Construct using com.dzhyun.proto.CldCaiWuShuJu.DividData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        obj_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        chuQuanRiQi_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        guQuanDenJiRi_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        songGuShu_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        zhuanZengGuShu_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        paiXiShu_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        peiGuShu_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        peiGuJia_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dzhyun.proto.CldCaiWuShuJu.internal_static_dzhyun_DividData_descriptor;
      }

      public com.dzhyun.proto.CldCaiWuShuJu.DividData getDefaultInstanceForType() {
        return com.dzhyun.proto.CldCaiWuShuJu.DividData.getDefaultInstance();
      }

      public com.dzhyun.proto.CldCaiWuShuJu.DividData build() {
        com.dzhyun.proto.CldCaiWuShuJu.DividData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dzhyun.proto.CldCaiWuShuJu.DividData buildPartial() {
        com.dzhyun.proto.CldCaiWuShuJu.DividData result = new com.dzhyun.proto.CldCaiWuShuJu.DividData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.obj_ = obj_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.chuQuanRiQi_ = chuQuanRiQi_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.guQuanDenJiRi_ = guQuanDenJiRi_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.songGuShu_ = songGuShu_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.zhuanZengGuShu_ = zhuanZengGuShu_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.paiXiShu_ = paiXiShu_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.peiGuShu_ = peiGuShu_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.peiGuJia_ = peiGuJia_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dzhyun.proto.CldCaiWuShuJu.DividData) {
          return mergeFrom((com.dzhyun.proto.CldCaiWuShuJu.DividData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dzhyun.proto.CldCaiWuShuJu.DividData other) {
        if (other == com.dzhyun.proto.CldCaiWuShuJu.DividData.getDefaultInstance()) return this;
        if (other.hasObj()) {
          bitField0_ |= 0x00000001;
          obj_ = other.obj_;
          onChanged();
        }
        if (other.hasChuQuanRiQi()) {
          bitField0_ |= 0x00000002;
          chuQuanRiQi_ = other.chuQuanRiQi_;
          onChanged();
        }
        if (other.hasGuQuanDenJiRi()) {
          bitField0_ |= 0x00000004;
          guQuanDenJiRi_ = other.guQuanDenJiRi_;
          onChanged();
        }
        if (other.hasSongGuShu()) {
          setSongGuShu(other.getSongGuShu());
        }
        if (other.hasZhuanZengGuShu()) {
          setZhuanZengGuShu(other.getZhuanZengGuShu());
        }
        if (other.hasPaiXiShu()) {
          setPaiXiShu(other.getPaiXiShu());
        }
        if (other.hasPeiGuShu()) {
          setPeiGuShu(other.getPeiGuShu());
        }
        if (other.hasPeiGuJia()) {
          setPeiGuJia(other.getPeiGuJia());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasObj()) {
          
          return false;
        }
        if (!hasChuQuanRiQi()) {
          
          return false;
        }
        if (!hasGuQuanDenJiRi()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dzhyun.proto.CldCaiWuShuJu.DividData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dzhyun.proto.CldCaiWuShuJu.DividData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object obj_ = "";
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public boolean hasObj() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public java.lang.String getObj() {
        java.lang.Object ref = obj_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            obj_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getObjBytes() {
        java.lang.Object ref = obj_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          obj_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public Builder setObj(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        obj_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public Builder clearObj() {
        bitField0_ = (bitField0_ & ~0x00000001);
        obj_ = getDefaultInstance().getObj();
        onChanged();
        return this;
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       * 品种Obj     SUBSTRING_INDEX(CO,'.',1) 
       * </pre>
       */
      public Builder setObjBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        obj_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object chuQuanRiQi_ = "";
      /**
       * <code>required string chuQuanRiQi = 2;</code>
       *
       * <pre>
       * 除权日期     C7
       * </pre>
       */
      public boolean hasChuQuanRiQi() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string chuQuanRiQi = 2;</code>
       *
       * <pre>
       * 除权日期     C7
       * </pre>
       */
      public java.lang.String getChuQuanRiQi() {
        java.lang.Object ref = chuQuanRiQi_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            chuQuanRiQi_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string chuQuanRiQi = 2;</code>
       *
       * <pre>
       * 除权日期     C7
       * </pre>
       */
      public com.google.protobuf.ByteString
          getChuQuanRiQiBytes() {
        java.lang.Object ref = chuQuanRiQi_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          chuQuanRiQi_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string chuQuanRiQi = 2;</code>
       *
       * <pre>
       * 除权日期     C7
       * </pre>
       */
      public Builder setChuQuanRiQi(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        chuQuanRiQi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string chuQuanRiQi = 2;</code>
       *
       * <pre>
       * 除权日期     C7
       * </pre>
       */
      public Builder clearChuQuanRiQi() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chuQuanRiQi_ = getDefaultInstance().getChuQuanRiQi();
        onChanged();
        return this;
      }
      /**
       * <code>required string chuQuanRiQi = 2;</code>
       *
       * <pre>
       * 除权日期     C7
       * </pre>
       */
      public Builder setChuQuanRiQiBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        chuQuanRiQi_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object guQuanDenJiRi_ = "";
      /**
       * <code>required string guQuanDenJiRi = 3;</code>
       *
       * <pre>
       * 股权登记日     C9
       * </pre>
       */
      public boolean hasGuQuanDenJiRi() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string guQuanDenJiRi = 3;</code>
       *
       * <pre>
       * 股权登记日     C9
       * </pre>
       */
      public java.lang.String getGuQuanDenJiRi() {
        java.lang.Object ref = guQuanDenJiRi_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            guQuanDenJiRi_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string guQuanDenJiRi = 3;</code>
       *
       * <pre>
       * 股权登记日     C9
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGuQuanDenJiRiBytes() {
        java.lang.Object ref = guQuanDenJiRi_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          guQuanDenJiRi_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string guQuanDenJiRi = 3;</code>
       *
       * <pre>
       * 股权登记日     C9
       * </pre>
       */
      public Builder setGuQuanDenJiRi(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        guQuanDenJiRi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string guQuanDenJiRi = 3;</code>
       *
       * <pre>
       * 股权登记日     C9
       * </pre>
       */
      public Builder clearGuQuanDenJiRi() {
        bitField0_ = (bitField0_ & ~0x00000004);
        guQuanDenJiRi_ = getDefaultInstance().getGuQuanDenJiRi();
        onChanged();
        return this;
      }
      /**
       * <code>required string guQuanDenJiRi = 3;</code>
       *
       * <pre>
       * 股权登记日     C9
       * </pre>
       */
      public Builder setGuQuanDenJiRiBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        guQuanDenJiRi_ = value;
        onChanged();
        return this;
      }

      private double songGuShu_ ;
      /**
       * <code>optional double songGuShu = 4;</code>
       *
       * <pre>
       * (每10股)送股数   C10
       * </pre>
       */
      public boolean hasSongGuShu() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double songGuShu = 4;</code>
       *
       * <pre>
       * (每10股)送股数   C10
       * </pre>
       */
      public double getSongGuShu() {
        return songGuShu_;
      }
      /**
       * <code>optional double songGuShu = 4;</code>
       *
       * <pre>
       * (每10股)送股数   C10
       * </pre>
       */
      public Builder setSongGuShu(double value) {
        bitField0_ |= 0x00000008;
        songGuShu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double songGuShu = 4;</code>
       *
       * <pre>
       * (每10股)送股数   C10
       * </pre>
       */
      public Builder clearSongGuShu() {
        bitField0_ = (bitField0_ & ~0x00000008);
        songGuShu_ = 0D;
        onChanged();
        return this;
      }

      private double zhuanZengGuShu_ ;
      /**
       * <code>optional double zhuanZengGuShu = 5;</code>
       *
       * <pre>
       * (每10股)转增股数    C11
       * </pre>
       */
      public boolean hasZhuanZengGuShu() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double zhuanZengGuShu = 5;</code>
       *
       * <pre>
       * (每10股)转增股数    C11
       * </pre>
       */
      public double getZhuanZengGuShu() {
        return zhuanZengGuShu_;
      }
      /**
       * <code>optional double zhuanZengGuShu = 5;</code>
       *
       * <pre>
       * (每10股)转增股数    C11
       * </pre>
       */
      public Builder setZhuanZengGuShu(double value) {
        bitField0_ |= 0x00000010;
        zhuanZengGuShu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double zhuanZengGuShu = 5;</code>
       *
       * <pre>
       * (每10股)转增股数    C11
       * </pre>
       */
      public Builder clearZhuanZengGuShu() {
        bitField0_ = (bitField0_ & ~0x00000010);
        zhuanZengGuShu_ = 0D;
        onChanged();
        return this;
      }

      private double paiXiShu_ ;
      /**
       * <code>optional double paiXiShu = 6;</code>
       *
       * <pre>
       * (每10股)派息数(税前)   C12
       * </pre>
       */
      public boolean hasPaiXiShu() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double paiXiShu = 6;</code>
       *
       * <pre>
       * (每10股)派息数(税前)   C12
       * </pre>
       */
      public double getPaiXiShu() {
        return paiXiShu_;
      }
      /**
       * <code>optional double paiXiShu = 6;</code>
       *
       * <pre>
       * (每10股)派息数(税前)   C12
       * </pre>
       */
      public Builder setPaiXiShu(double value) {
        bitField0_ |= 0x00000020;
        paiXiShu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double paiXiShu = 6;</code>
       *
       * <pre>
       * (每10股)派息数(税前)   C12
       * </pre>
       */
      public Builder clearPaiXiShu() {
        bitField0_ = (bitField0_ & ~0x00000020);
        paiXiShu_ = 0D;
        onChanged();
        return this;
      }

      private double peiGuShu_ ;
      /**
       * <code>optional double peiGuShu = 7;</code>
       *
       * <pre>
       * (每10股)配股数    C14
       * </pre>
       */
      public boolean hasPeiGuShu() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double peiGuShu = 7;</code>
       *
       * <pre>
       * (每10股)配股数    C14
       * </pre>
       */
      public double getPeiGuShu() {
        return peiGuShu_;
      }
      /**
       * <code>optional double peiGuShu = 7;</code>
       *
       * <pre>
       * (每10股)配股数    C14
       * </pre>
       */
      public Builder setPeiGuShu(double value) {
        bitField0_ |= 0x00000040;
        peiGuShu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double peiGuShu = 7;</code>
       *
       * <pre>
       * (每10股)配股数    C14
       * </pre>
       */
      public Builder clearPeiGuShu() {
        bitField0_ = (bitField0_ & ~0x00000040);
        peiGuShu_ = 0D;
        onChanged();
        return this;
      }

      private double peiGuJia_ ;
      /**
       * <code>optional double peiGuJia = 8;</code>
       *
       * <pre>
       * 配股价   C15
       * </pre>
       */
      public boolean hasPeiGuJia() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double peiGuJia = 8;</code>
       *
       * <pre>
       * 配股价   C15
       * </pre>
       */
      public double getPeiGuJia() {
        return peiGuJia_;
      }
      /**
       * <code>optional double peiGuJia = 8;</code>
       *
       * <pre>
       * 配股价   C15
       * </pre>
       */
      public Builder setPeiGuJia(double value) {
        bitField0_ |= 0x00000080;
        peiGuJia_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double peiGuJia = 8;</code>
       *
       * <pre>
       * 配股价   C15
       * </pre>
       */
      public Builder clearPeiGuJia() {
        bitField0_ = (bitField0_ & ~0x00000080);
        peiGuJia_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzhyun.DividData)
    }

    static {
      defaultInstance = new DividData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzhyun.DividData)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dzhyun_BasicFinanceData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzhyun_BasicFinanceData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dzhyun_DividData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzhyun_DividData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023CldCaiWuShuJu.proto\022\006dzhyun\"\241\010\n\020BasicF" +
      "inanceData\022\013\n\003obj\030\001 \002(\t\022\017\n\007repdate\030\002 \002(\t" +
      "\022\021\n\tfloatdate\030\003 \001(\003\022\016\n\006earnps\030\004 \001(\001\022\017\n\007a" +
      "ssetps\030\005 \001(\001\022\014\n\004rona\030\006 \001(\001\022\016\n\006cashps\030\007 \001" +
      "(\001\022\022\n\naccufundps\030\010 \001(\001\022\027\n\017unapproprofitp" +
      "s\030\t \001(\001\022\024\n\014rateonequity\030\n \001(\001\022\021\n\tprofiti" +
      "nc\030\013 \001(\001\022\021\n\tincomeinc\030\014 \001(\001\022\023\n\013grossprof" +
      "it\030\r \001(\001\022\022\n\nadjassetps\030\016 \001(\001\022\r\n\005asset\030\017 " +
      "\001(\001\022\022\n\nfloatasset\030\020 \001(\001\022\022\n\nfixedasset\030\021 " +
      "\001(\001\022\020\n\010intasset\030\022 \001(\001\022\022\n\nfloatdebet\030\023 \001(",
      "\001\022\021\n\tlongdebet\030\024 \001(\001\022\020\n\010alldebet\030\025 \001(\001\022\023" +
      "\n\013hoderequity\030\026 \001(\001\022\023\n\013capitalfund\030\027 \001(\001" +
      "\022\021\n\tcashfloat\030\030 \001(\001\022\023\n\013investfloat\030\031 \001(\001" +
      "\022\022\n\nraisefloat\030\032 \001(\001\022\017\n\007cashinc\030\033 \001(\001\022\022\n" +
      "\nmainincome\030\034 \001(\001\022\022\n\nmainprofit\030\035 \001(\001\022\023\n" +
      "\013tradeprofit\030\036 \001(\001\022\024\n\014investprofit\030\037 \001(\001" +
      "\022\024\n\014otherbalance\030  \001(\001\022\021\n\tallprofit\030! \001(" +
      "\001\022\021\n\tnetprofit\030\" \001(\001\022\025\n\runapproprofit\030# " +
      "\001(\001\022\022\n\ntotalshare\030$ \001(\001\022\027\n\017norestrictsha" +
      "re\030% \001(\001\022\016\n\006ashare\030& \001(\001\022\016\n\006bshare\030\' \001(\001",
      "\022\024\n\014foreignshare\030( \001(\001\022\027\n\017otherfloatshar" +
      "e\030) \001(\001\022\025\n\rrestrictshare\030* \001(\001\022\023\n\013nation" +
      "share\030+ \001(\001\022\024\n\014natcorpshare\030, \001(\001\022\027\n\017dom" +
      "estcorpshare\030- \001(\001\022\026\n\016domestindshare\030. \001" +
      "(\001\022\030\n\020otherlaunchshare\030/ \001(\001\022\026\n\016raisecor" +
      "pshare\0300 \001(\001\022\030\n\020foreigncorpshare\0301 \001(\001\022\027" +
      "\n\017foreingIndshare\0302 \001(\001\022\030\n\020preforothersh" +
      "are\0303 \001(\001\"\245\001\n\tDividData\022\013\n\003obj\030\001 \002(\t\022\023\n\013" +
      "chuQuanRiQi\030\002 \002(\t\022\025\n\rguQuanDenJiRi\030\003 \002(\t" +
      "\022\021\n\tsongGuShu\030\004 \001(\001\022\026\n\016zhuanZengGuShu\030\005 ",
      "\001(\001\022\020\n\010paiXiShu\030\006 \001(\001\022\020\n\010peiGuShu\030\007 \001(\001\022" +
      "\020\n\010peiGuJia\030\010 \001(\001B\022\n\020com.dzhyun.proto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_dzhyun_BasicFinanceData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dzhyun_BasicFinanceData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dzhyun_BasicFinanceData_descriptor,
        new java.lang.String[] { "Obj", "Repdate", "Floatdate", "Earnps", "Assetps", "Rona", "Cashps", "Accufundps", "Unapproprofitps", "Rateonequity", "Profitinc", "Incomeinc", "Grossprofit", "Adjassetps", "Asset", "Floatasset", "Fixedasset", "Intasset", "Floatdebet", "Longdebet", "Alldebet", "Hoderequity", "Capitalfund", "Cashfloat", "Investfloat", "Raisefloat", "Cashinc", "Mainincome", "Mainprofit", "Tradeprofit", "Investprofit", "Otherbalance", "Allprofit", "Netprofit", "Unapproprofit", "Totalshare", "Norestrictshare", "Ashare", "Bshare", "Foreignshare", "Otherfloatshare", "Restrictshare", "Nationshare", "Natcorpshare", "Domestcorpshare", "Domestindshare", "Otherlaunchshare", "Raisecorpshare", "Foreigncorpshare", "ForeingIndshare", "Preforothershare", });
    internal_static_dzhyun_DividData_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dzhyun_DividData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dzhyun_DividData_descriptor,
        new java.lang.String[] { "Obj", "ChuQuanRiQi", "GuQuanDenJiRi", "SongGuShu", "ZhuanZengGuShu", "PaiXiShu", "PeiGuShu", "PeiGuJia", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
