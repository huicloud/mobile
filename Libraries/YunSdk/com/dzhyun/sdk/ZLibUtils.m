//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./android/src/main/java/com/dzhyun/sdk/ZLibUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/dzhyun/sdk/ZLibUtils.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/DeflaterOutputStream.h"
#include "java/util/zip/Inflater.h"
#include "java/util/zip/InflaterInputStream.h"

@implementation ComDzhyunSdkZLibUtils

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)data {
  return ComDzhyunSdkZLibUtils_compressWithByteArray_(data);
}

+ (void)compressWithByteArray:(IOSByteArray *)data
       withJavaIoOutputStream:(JavaIoOutputStream *)os {
  ComDzhyunSdkZLibUtils_compressWithByteArray_withJavaIoOutputStream_(data, os);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)data {
  return ComDzhyunSdkZLibUtils_decompressWithByteArray_(data);
}

+ (IOSByteArray *)decompressWithJavaIoInputStream:(JavaIoInputStream *)is {
  return ComDzhyunSdkZLibUtils_decompressWithJavaIoInputStream_(is);
}

+ (NSString *)decompressToGBKStringWithByteArray:(IOSByteArray *)data {
  return ComDzhyunSdkZLibUtils_decompressToGBKStringWithByteArray_(data);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComDzhyunSdkZLibUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compressWithByteArray:", "compress", "[B", 0x9, NULL, NULL },
    { "compressWithByteArray:withJavaIoOutputStream:", "compress", "V", 0x9, NULL, NULL },
    { "decompressWithByteArray:", "decompress", "[B", 0x9, NULL, NULL },
    { "decompressWithJavaIoInputStream:", "decompress", "[B", 0x9, NULL, NULL },
    { "decompressToGBKStringWithByteArray:", "decompressToGBKString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComDzhyunSdkZLibUtils = { 2, "ZLibUtils", "com.dzhyun.sdk", NULL, 0x401, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComDzhyunSdkZLibUtils;
}

@end

IOSByteArray *ComDzhyunSdkZLibUtils_compressWithByteArray_(IOSByteArray *data) {
  ComDzhyunSdkZLibUtils_initialize();
  IOSByteArray *output = [IOSByteArray newArrayWithLength:0];
  JavaUtilZipDeflater *compresser = new_JavaUtilZipDeflater_init();
  [compresser reset];
  [compresser setInputWithByteArray:data];
  [compresser finish];
  JavaIoByteArrayOutputStream *bos = new_JavaIoByteArrayOutputStream_initWithInt_(((IOSByteArray *) nil_chk(data))->size_);
  @try {
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:1024];
    while (![compresser finished]) {
      jint i = [compresser deflateWithByteArray:buf];
      [bos writeWithByteArray:buf withInt:0 withInt:i];
    }
    output = [bos toByteArray];
  }
  @catch (JavaLangException *e) {
    output = data;
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    @try {
      [bos close];
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  [compresser end];
  return output;
}

void ComDzhyunSdkZLibUtils_compressWithByteArray_withJavaIoOutputStream_(IOSByteArray *data, JavaIoOutputStream *os) {
  ComDzhyunSdkZLibUtils_initialize();
  JavaUtilZipDeflaterOutputStream *dos = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_(os);
  @try {
    [dos writeWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
    [dos finish];
    [dos flush];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

IOSByteArray *ComDzhyunSdkZLibUtils_decompressWithByteArray_(IOSByteArray *data) {
  ComDzhyunSdkZLibUtils_initialize();
  IOSByteArray *output = [IOSByteArray newArrayWithLength:0];
  JavaUtilZipInflater *decompresser = new_JavaUtilZipInflater_init();
  [decompresser reset];
  [decompresser setInputWithByteArray:data];
  JavaIoByteArrayOutputStream *o = new_JavaIoByteArrayOutputStream_initWithInt_(((IOSByteArray *) nil_chk(data))->size_);
  @try {
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:1024];
    while (![decompresser finished]) {
      jint i = [decompresser inflateWithByteArray:buf];
      [o writeWithByteArray:buf withInt:0 withInt:i];
    }
    output = [o toByteArray];
  }
  @catch (JavaLangException *e) {
    output = data;
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    @try {
      [o close];
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  [decompresser end];
  return output;
}

IOSByteArray *ComDzhyunSdkZLibUtils_decompressWithJavaIoInputStream_(JavaIoInputStream *is) {
  ComDzhyunSdkZLibUtils_initialize();
  JavaUtilZipInflaterInputStream *iis = new_JavaUtilZipInflaterInputStream_initWithJavaIoInputStream_(is);
  JavaIoByteArrayOutputStream *o = new_JavaIoByteArrayOutputStream_initWithInt_(1024);
  @try {
    jint i = 1024;
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:i];
    while ((i = [iis readWithByteArray:buf withInt:0 withInt:i]) > 0) {
      [o writeWithByteArray:buf withInt:0 withInt:i];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return [o toByteArray];
}

NSString *ComDzhyunSdkZLibUtils_decompressToGBKStringWithByteArray_(IOSByteArray *data) {
  ComDzhyunSdkZLibUtils_initialize();
  @try {
      NSStringEncoding gbkEncoding = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);

      IOSByteArray * content = ComDzhyunSdkZLibUtils_decompressWithByteArray_(data);
      return [[NSString alloc] initWithBytes:[content buffer] length:[content length] encoding:gbkEncoding];

  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

void ComDzhyunSdkZLibUtils_init(ComDzhyunSdkZLibUtils *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComDzhyunSdkZLibUtils)
